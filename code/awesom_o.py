"""–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –®.–ò.–ö.–ê.–†.–ù.-–û"""
import datetime as dt
import logging
import os
import random
import re
import shelve
import time

from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)
import requests

import functions as func
import texts_for_bot as txt

load_dotenv()
TOKEN = os.getenv('AWESOM_O_TOKEN')
bot = Bot(token=TOKEN)

def start_logging():
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s, %(levelname)s, %(message)s, '
               '%(funcName)s, %(lineno)s',
        handlers=[logging.StreamHandler(),
                  logging.handlers.RotatingFileHandler(
                      __file__ + '.log', maxBytes=2100000,
                      backupCount=2, encoding='utf-8')]
    )

ANECDOTE_BTN = '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç üòÉ'
BEGIN_BTN = '–ü–æ–µ—Ö–∞–ª–∏ üëå'
BRAVO_BTN = '–ë—Ä–∞–≤–æ! –≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ ü§£'
CAT_BTN = '–ö–æ—Ç–∏–∫–∞ —Ö–æ—á—É üêà'
CATS_TRAIN_BTN = '–ü–æ–π–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞ –∫–æ—à–∫–∞—Ö üêà'
DONE_NEXT_BTN = '–°–¥–µ–ª–∞–Ω–æ ‚úîÔ∏è –î–∞–≤–∞–π –¥–∞–ª—å—à–µ'
EAT_CORN_BTN = '–ü–æ–π–¥—É –≥—Ä—ã–∑—Ç—å —Å–≤–æ—é –∫—É–∫—É—Ä—É–∑–∫—É üòã'
ENOUGH_BTN = '–¢–æ—á–Ω–æ! –•–≤–∞—Ç–∏—Ç üñê'
EXTRASENS_BTN = '–ö—Ä—É—Ç–æ! –¢—ã —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å üò≤'
HALL_OF_FAME_BTN = '–ü–æ–∫–∞–∂–∏ –∑–∞–ª —Å–ª–∞–≤—ã –∏–≥—Ä–æ–∫–æ–≤ ü§©'
HANDS_UP_BTN = '–Ø –≤–æ–æ–±—â–µ –†—É–∫–∏ –í–≤–µ—Ä—Ö –ª—é–±–ª—é üôå'
HAVE_MERCY_BTN = '–û, –Ω–µ—Ç! –®.–ò.–ö.–ê.–†.–ù.-–û, –ø–æ—â–∞–¥–∏ üò®üôè'
KOMBIKORM_BTN = '–ö–æ–º–±–∏–∫–æ—Ä–º! –ú–º–º... –í–∫—É—Å–Ω—è—Ç–∏–Ω–∞ üòã'
LETS_PLAY_BTN = '–ò–∑–∏! –°–æ–∑–¥–∞–≤–∞–π ü§†'
MATH_BAD_BTN = '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —è–≤–Ω–æ –Ω–µ –º–æ—ë üòî'
MORE_TALANTS_BTN = '–ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è –µ—â—ë —Ç–∞–ª–∞–Ω—Ç—ã üòè'
NEXT_TIME_BTN = '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üôÖüèª‚Äç‚ôÇÔ∏è'
NO_FUNNY_BTN = '–û—á–µ–Ω—å —Å–º–µ—à–Ω–æ üò§'
NO_MORE_GAME_BTN = '–ë–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—å üòê'
NOT_MY_BIRTH_BTN = '–ù–µ–∞, –Ω–µ–≤–µ—Ä–Ω–æ! ü§®'
NOT_STUPID_BTN = '–Ø —Ç–µ–±–µ –Ω–µ —Ç—É–ø–∏—Ü–∞! üò§'
PETTING_BTN = '–î–∞–≤–∞–π –ø–æ–≥–ª–∞–∂—É ü§ó'
RED_BTN = '–ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ üî¥'
REVENGE_BTN = '–•–æ—á—É —Ä–µ–≤–∞–Ω—à ü•ä'
SO_SO_BTN = '–ù—É, —Ç–∞–∫–æ–µ —Å–µ–±–µ üôÑ'
SONG_BTN = '–°–ø–æ–π –ø–µ—Å–µ–Ω–∫—É üé§'
STRANGE_NAME_BTN = '–°—Ç—Ä–∞–Ω–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è ü§î'
STUPID_BTN = '–Ø —Ç—É–ø–∏—Ü–∞... üò¢'
SURPRISE_ME_BTN = '–ê –Ω—É-–∫–∞, —É–¥–∏–≤–∏! üòê'
WHAT_ARE_YOU_BTN = '–î–∞ —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ ü§®'
WIN_BACK_BTN = '–î–∞–º —Ç–µ–±–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è üòô'
YOUR_TURN_BTN = '–¢–≤–æ–π —Ö–æ–¥ üëÜ'
MAIN_MENU = [[CAT_BTN, ANECDOTE_BTN], [SONG_BTN, WHAT_ARE_YOU_BTN]]

BET_RANGE = r'^([3-9]|[1][0-1]) ([3-9]|[1][0-1])$'
CARTMAN = r'–≠—Ä–∏–∫[–∞–µ]? –ö–∞—Ä—Ç–º–∞–Ω[–∞–µ]?'
CREATOR = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –°–æ–∑–¥–∞—Ç–µ–ª—å\??$'
INNA = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –ù—è—à–∫–∞\??$'
KENNY = r'^–û–Ω–∏ —É–±–∏–ª–∏ –ö–µ–Ω+–∏$'
KEP4IK = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ö—ç–ø\??$'
LEMUR = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –õ–µ–º—É—Ä\??$'
MARIK = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ú–∞—Ä–∏–∫\??$'
MARINA = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –ú–∞—Ä–∏—à–∫–∞\??$'
UNKNOWN = r'^–ö—Ç–æ —Ç–∞–∫(–æ–π|–∞—è) [–ê-—è]{3,20}\??$'
ZAJA = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ó–∞–∂–∞\??$'
ZERO = r'[–ü–ø]—Ä–∏—Ç–≤–æ—Ä[–∏—è](—Å—å|—Ç—å?—Å—è) –Ω–æ–ª–∏–∫–æ–º'
OR = '|'
HIDDEN_PHRASES = KENNY + OR + CARTMAN + OR + ZERO + OR + '–ú–∞—Ä–∫–ª–∞—Ä'
HAVE_DOSSIERS = (CREATOR + OR + KEP4IK + OR + INNA + OR + LEMUR +
                 OR + ZAJA + OR + MARIK + OR + MARINA)

BIRTH_1, BIRTH_2, BIRTH_3, BIRTH_4, BIRTH_5 = range(5)
FALAFEL = 1
BOT_DICE, USER_BET, USER_DICE = range(3)


def wake_up(update, context):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é "/start"."""
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([[PETTING_BTN]], resize_keyboard=True)
    text = (f'–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ä–æ–±–æ—Ç –®.–ò.–ö.–ê.–†.–ù.-–û —á–µ—Ç—ã—Ä–µ —Ç—ã—Å—è—á–∏ ü§ñ',
            '–í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞–Ω–æ-–∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π '
            '–±–∏–æ-—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º ‚öôÔ∏è', '–ú–æ–∂–µ—à—å –º–µ–Ω—è –ø–æ–≥–ª–∞–¥–∏—Ç—å üôÉ')
    context.bot.send_message(chat.id, text[0])
    time.sleep(1.5)
    context.bot.send_message(chat.id, text[1])
    time.sleep(1.5)
    context.bot.send_message(chat.id, text[2], reply_markup=button)


def stop_petting(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞–≤–∞–π –ø–æ–≥–ª–∞–∂—É ü§ó"."""
    text = ('–®.–ò.–ö.–ê.–†.–ù.-–û –Ω—Ä–∞–≤–∏—Ç—Å—è.', '–®.–ò.–ö.–ê.–†.–ù.-–û —Ö–æ—Ä–æ—à–æ.',
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π', '...', '–•–≤–∞—Ç–∏—Ç —Ç—Ä–æ-–≥–∞—Ç—å –º–æ—é –±–∞-—Ç–∞—Ä–µ–π–∫—É!')
    button = ReplyKeyboardMarkup([[STRANGE_NAME_BTN]], resize_keyboard=True)
    for phrase in text[:-1]:
        update.message.reply_text(phrase, reply_markup=ReplyKeyboardRemove())
        time.sleep(1.5)
    update.message.reply_text(text[-1], reply_markup=button)


def strange_name(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—Ç—Ä–∞–Ω–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è ü§î"."""
    text = ('–Ø –Ω–∞-–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞-–∂–∞ 2 —Å–µ—Ä–∏–∏ 8 —Å–µ–∑–æ–Ω–∞ –º—É–ª—å—Ç—Å–µ-'
            '—Ä–∏–∞–ª–∞ "South Park".\n–ï—Å–ª–∏ –Ω–µ –ø–æ-—Å–º–æ—Ç—Ä–∏—à—å –µ—ë, –®.–ò.–ö.–ê.–†.–ù.-–û '
            '–±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–Ω—ã–º –ø–∞–Ω–¥–æ–π üêº\nhttp://online-south-park.ru/season-8/'
            '130-8-sezon-2-seriya-shikarn-o.html')
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    update.message.reply_text(text, reply_markup=button)


def default_answer(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    answers = ('–ß—ë –¥—É—à–∏—à—å –º–µ–Ω—è? üò†', '–ù—É —è—Å–Ω–æ! –ß—Ç–æ –µ—â—ë —Å–∫–∞–∂–µ—à—å? ü§®',
               '–®.–ò.–ö.–ê.–†.–ù.-–û –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–π –¥–∏–∞–ª–µ–∫—Ç ü§∑üèª‚Äç‚ôÄÔ∏è',
               '–û—Ç–∫–∞–∑–∞–Ω–æ! –õ—É—á—à–µ –ø–æ—á–∏—Å—Ç–∏ –º–æ–∏ —Ç—Ä–∞–Ω-–∑–∏—Å-—Ç–æ—Ä—ã ü™õüîß',
               '–†–∞–º–∞–º–±–∞ –•–∞—Ä—É –ú–∞–º–±—É—Ä—É ü§™')
    update.message.reply_text(random.choice(answers))


def get_new_cat_image(update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∏–∫–∞ –∏–ª–∏ –ø—ë—Å–∏–∫–∞."""
    CATS_URL = 'https://api.thecatapi.com/v1/images/search'
    DOGS_URL = 'https://api.thedogapi.com/v1/images/search'
    try:
        response = requests.get(CATS_URL).json()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        response = requests.get(DOGS_URL).json()
        update.message.reply_text('–£–ø—Å! –ö–æ—Ç–∏–∫–æ–≤ –Ω–µ –ø–æ–¥–≤–µ–∑–ª–∏. –í–æ—Ç —Ç–µ–±–µ –ø—ë—Å–∏–∫ üê∂')
    random_cat = response[0].get('url')
    return random_cat


def show_cat_picture(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ç–∏–∫–∞ —Ö–æ—á—É üêà"."""
    button = ReplyKeyboardMarkup([[LETS_PLAY_BTN], [NEXT_TIME_BTN]], resize_keyboard=True)
    update.message.reply_text(text='–®.–ò.–ö.–ê.–†.–ù.-–û –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üòª –ö—ã—Å-–∫—ã—Å-–∫—ã—Å!', reply_markup=ReplyKeyboardRemove())
    time.sleep(1)
    update.message.reply_photo(get_new_cat_image(update))
    time.sleep(1)
    update.message.reply_text(random.choice(txt.SHOW_CAT_TEXT))
    time.sleep(1)
    update.message.reply_text('–ö–æ—Ç–∏–∫–∏ —ç—Ç–æ —Ö–æ-—Ä–æ—à–æ. –ê –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –ø–µ—Ä–µ–∫–∏-–Ω—É—Ç—å—Å—è –≤ –∫–æ—Å—Ç–∏? üòâ', reply_markup=button)


def some_song(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–æ–π –ø–µ—Å–µ–Ω–∫—É üé§"."""
    song = random.choice((txt.SONG_1, txt.SONG_2, txt.SONG_3,
                          txt.SONG_4, txt.SONG_5, txt.SONG_6))
    button = ReplyKeyboardMarkup([[HANDS_UP_BTN], [MORE_TALANTS_BTN]],
                                 resize_keyboard=True)
    update.message.reply_text(text=song, reply_markup=ReplyKeyboardRemove())
    time.sleep(1.5)
    update.message.reply_text(random.choice(txt.SOME_SONG_TEXT), reply_markup=button)


def song_reaction(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã "–Ø –≤–æ–æ–±—â–µ –†—É–∫–∏ –í–≤–µ—Ä—Ö –ª—é–±–ª—é üôå" –∏
    "–ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è –µ—â—ë —Ç–∞–ª–∞–Ω—Ç—ã üòè"."""
    if update.message.text == HANDS_UP_BTN:
        button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        text = '–•–æ—Ä–æ—à–æ —Ö–æ—Ç—å –Ω–µ –ù–æ–≥—É –°–≤–µ–ª–æ ü¶µ'
    else:
        button = ReplyKeyboardMarkup([[SURPRISE_ME_BTN]], resize_keyboard=True)
        text = ('–°–∏–ª–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-–≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å-–Ω–æ–π –º—ã—Å–ª–∏ '
                '–º–æ–≥—É —É–≥–∞–¥–∞—Ç—å –¥–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è üßôüèª')
    update.message.reply_text(text=text, reply_markup=button)


def birthday_init(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ê –Ω—É-–∫–∞, —É–¥–∏–≤–∏! üòê"."""
    button = ReplyKeyboardMarkup([[NOT_STUPID_BTN], [STUPID_BTN]],
                                 resize_keyboard=True)
    update.message.reply_text(text='–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ-—Å—á–∏—Ç–∞—Ç—å. –í–æ–∑—å–º–∏ –∫–∞–ª—å–∫—É-–ª—è—Ç–æ—Ä. '
                                   '–ù–∞–¥–µ—é—Å—å, —Ç—ã —É–º–µ–µ—à—å –∏–º –ø–æ–ª—å-–∑–æ–≤–∞—Ç—å—Å—è? ü§≠',
                              reply_markup=button)
    return BIRTH_1


def cancel_or_birthday_1(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã "–Ø —Ç—É–ø–∏—Ü–∞... üò¢" –∏ "–Ø —Ç–µ–±–µ –Ω–µ —Ç—É–ø–∏—Ü–∞! üò§"."""
    if update.message.text == STUPID_BTN:
        button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text(text='–ê —è —Å—Ä–∞–∑—É –ø–æ–Ω—è–ª, —á—Ç–æ —Å–æ–æ–±—Ä–∞–∂–∞–ª-–∫–∞ —É —Ç–µ–±—è –Ω–µ –æ—á–µ–Ω—å üôÑ\n'
                                       '–ù—É –Ω–∏—á–µ–≥–æ. –û—Å–æ–∑–Ω–∞–Ω–∏–µ - –ø–µ—Ä–≤—ã–π –ø—É—Ç—å –∫ –∏—Å-–ø—Ä–∞–≤–ª–µ–Ω–∏—é!\n'
                                       '–ù–∞—á–Ω–∏ —Å–æ —Å—á—ë—Ç–Ω—ã—Ö –ø–∞–ª–æ-—á–µ–∫... ü¶ß',
                                  reply_markup=button)
        return ConversationHandler.END
    else:
        button = ReplyKeyboardMarkup([[DONE_NEXT_BTN]], resize_keyboard=True)
        update.message.reply_text(text='–í–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏–º.\n–î–µ–π—Å—Ç–≤—É–π —Å–æ-–≥–ª–∞—Å–Ω–æ '
                                       '–º–æ–∏–º —É–∫–∞–∑–∞-–Ω–∏—è–º ‚òùÔ∏è\n', reply_markup=ReplyKeyboardRemove())
        time.sleep(1.5)
        update.message.reply_text(text='–ü–µ—Ä–≤—ã–º –¥–µ-–ª–æ–º —É–º–Ω–æ–∂—å —á–∏—Å–ª–æ —Å–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è –Ω–∞ 2 ‚òëÔ∏è\n'
                                       '–ö —Ä–µ-–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–∏–±–∞–≤—å 5 ‚òëÔ∏è',
                                       reply_markup=button)
        return BIRTH_2


def birthday_2(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–Ω–æ ‚úîÔ∏è –î–∞–≤–∞–π –¥–∞–ª—å—à–µ"."""
    button = ReplyKeyboardMarkup([[MATH_BAD_BTN]], resize_keyboard=True)
    if update.message.text == DONE_NEXT_BTN:
        update.message.reply_text(text='–ü–æ–ª—É-—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂—å –Ω–∞ 50 ‚òëÔ∏è\n–ó–∞—Ç–µ–º –ø—Ä–∏–±–∞–≤—å –ø–æ—Ä—è–¥-–∫–æ–≤—ã–π'
                                       ' –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ —Å–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è.\n'
                                       '–ù–∞-–ø—Ä–∏–º–µ—Ä, —è–Ω–≤–∞—Ä—å - 1—ã–π, –¥–µ–∫–∞–±—Ä—å - 12—ã–π ‚òëÔ∏è',
                                  reply_markup=ReplyKeyboardRemove())
        time.sleep(1.5)
        update.message.reply_text(text='–ù—É –∫–∞–∫? –¢–≤–æ–π –ø—Ä–æ-—Ü–µ—Å—Å–æ—Ä –µ—â—ë –Ω–µ –ø–µ—Ä–µ-–≥—Ä–µ–ª—Å—è? ü§Ø\n'
                                       '–¢–µ—Ä–º–æ–ø–∞—Å—Ç—É –ø–æ–º–µ-–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ?',
                                  reply_markup=button)
        return BIRTH_3
    else:
        update.message.reply_text(text='–í–≤–µ–¥—ë—à—å —á–∏—Å–ª–æ, –∫–æ–≥–¥–∞ —è —Å–∫–∞-–∂—É ü§¶üèª‚Äç‚ôÇÔ∏è\n–í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞...')


def birthday_3(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —è–≤–Ω–æ –Ω–µ –º–æ—ë üòî"."""
    if update.message.text == MATH_BAD_BTN:
        update.message.reply_text(text='–°–æ-–±–µ—Ä–∏—Å—å, —Ç—Ä—è–ø–∫–∞! üò† –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å—á–∏-—Ç–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n',
                                  reply_markup=ReplyKeyboardRemove())
        time.sleep(1.5)
        update.message.reply_text(text='–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫ ü§ì\n'
                                       '–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ-—Ä–æ–µ —É —Ç–µ–±—è –ø–æ-–ª—É—á–∏–ª–æ—Å—å.')
        return BIRTH_4
    else:
        update.message.reply_text(text='–ù–µ –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ ü§¶üèª‚Äç‚ôÇÔ∏è\n–í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞...')


def birthday_4(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ."""
    button = ReplyKeyboardMarkup([[EXTRASENS_BTN], [NOT_MY_BIRTH_BTN]],
                                 resize_keyboard=True)
    MONTHS = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è',
              6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è',
              11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}
    result = int(update.message.text) - 250
    day = result // 100
    month = MONTHS.get(result % 100)
    if not 0 < day <= 31 or month is None:
        update.message.reply_text('–ü–µ—Ä–µ–ø—Ä–æ-–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞ ‚òùÔ∏è')
        return
    update.message.reply_text(text='–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å... ü•Å')
    time.sleep(1.5)
    update.message.reply_text(text=f'–î–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚öúÔ∏è {day} {month} ‚öúÔ∏è',
                              reply_markup=button)
    if str(result) == dt.date.today().strftime('%d%m'):
        time.sleep(1.5)
        update.message.reply_text(text='–¢–∞–∫ —ç—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ-–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º –í–∞—Ä–µ–Ω—å—è!\n'
                                       '–†–∞—Å—Ç–∏ –±–æ–ª—å—à–æ–π, –Ω–µ –±—É–¥—å –ª–∞-–ø—à–æ–π ü•≥üéäüéâ')
    return BIRTH_5


def birthday_finish(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã "–ö—Ä—É—Ç–æ! –¢—ã —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å üò≤" –∏ "–ù–µ–∞, –Ω–µ–≤–µ—Ä–Ω–æ! ü§®"."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == EXTRASENS_BTN:
        text = ('–Ø –∑–Ω–∞—é, —è –∫—Ä—É—Ç–æ–π üòé\n–° —Ç–µ–±—è 100$ üíµ\n'
                '–ü–µ-—Ä–µ–≤–µ–¥–∏ –Ω–∞ –º–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω-–Ω—ã–π –∫–æ—à–µ–ª—ë–∫')
    else:
        text = ('–î–∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∏-—Ç–∞—Ç—å –Ω–µ —É–º–µ–µ—à—å ü§¶üèª‚Äç‚ôÇÔ∏è\n–ê –µ—â—ë –≥–æ–≤–æ—Ä—è—Ç '
                '—á–µ–ª–æ–≤–µ–∫ - –≤–µ—Ä—à–∏–Ω–∞ —ç–≤–æ–ª—é—Ü–∏–∏. –ù—É-–Ω—É... ü§î')
    update.message.reply_text(text=text, reply_markup=button)
    return ConversationHandler.END


def birth_fallback(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –î–†."""
    update.message.reply_text(text='–¢–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥—ë—Ç...\n–î–∞–≤–∞–π, —Å–æ-'
                                   '—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –∏ –¥–µ–π—Å—Ç–≤—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫-—Ü–∏–∏ üßê')


def show_anecdote(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç üòÉ"."""
    try:
        response = requests.get('http://anekdotme.ru/random/')
        # –° –ø–æ–º–æ—â—å—é –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_html = BeautifulSoup(response.text, 'html.parser')
        # –ò–∑ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã class='anekdot_text',
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç.
        anecdote = page_html.select('.anekdot_text')[0].get_text()
        text = ('–®.–ò.–ö.–ê.–†.–ù.-–û –∑–Ω–∞–µ—Ç –º–Ω–æ–≥–æ –∞-–Ω–µ–∫-–¥–æ-—Ç–æ–≤. –í–æ—Ç:', anecdote,
                '–ê—Ö–∞-—Ö–∞! –ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–µ–π—á–∞—Å –ª–æ–ø–Ω–µ—Ç –æ—Ç —Å–º–µ—Ö–∞ ü§£')
        button = ReplyKeyboardMarkup([[SO_SO_BTN], [BRAVO_BTN]],
                                     resize_keyboard=True)
        for phrase in text:
            update.message.reply_text(phrase, reply_markup=ReplyKeyboardRemove() if phrase != text[-1] else button)
            time.sleep(1.5)
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text(text='–î–æ–ª-–±–∞–Ω—ã–µ –≤—ã—à–∫–∏ 5G. –û–Ω–∏ –∂–≥—É—Ç –º–æ–∏ –º–∏–∫—Ä–æ-—Å—Ö–µ–º—ã üòï\n'
                                       '–†–∞—Å—Å–∫–∞–∂—É –≤ —Å–ª–µ-–¥—É—é—â–∏–π —Ä–∞–∑...')


def bravo_or_so_so(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã "–ù—É —Ç–∞–∫–æ–µ —Å–µ–±–µ ü§®" –∏ "–ë—Ä–∞–≤–æ! –≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ ü§£"."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == BRAVO_BTN:
        text = ('–ú–æ–ª–æ–¥–µ—Ü! –í–æ–∑—å–º–∏ —Å –ø–æ–ª–∫–∏ –ø–∏—Ä–æ-–∂–æ–∫ ü•Ø', '–ï—â—ë –±—ã! –Ø —É—á–∏–ª-—Å—è —É —Å–∞–º–æ–≥–æ '
                '–î—Ä–æ–±–æ—Ç–µ–Ω–∫–æ üòâ', '–°–º–æ—Ç—Ä–∏, —á—Ç–æ–± –ø—É-–ø–æ–∫ –æ—Ç —Å–º–µ—Ö–∞ –Ω–µ —Ä–∞–∑–≤—è-–∑–∞–ª—Å—è üôà')
    else:
        text = ('–£ —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —á—É-–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ üò§', '–≠—Ç–æ –¥–æ —Ç–µ–±—è –¥–æ–ª-–≥–æ –¥–æ—Ö–æ–¥–∏—Ç. '
                '–ö–∞–∫ –¥–æ –∂–∏—Ä–∞-—Ñ–∞ ü¶í', '–ò–¥–∏ —Å–º–æ—Ç—Ä–∏ –°–º–µ—Ö–æ–ø–∞–Ω–æ—Ä–∞-–º—É —Ç–æ–≥–¥–∞ üò†')
    update.message.reply_text(text=random.choice(text), reply_markup=button)


def what_are_you(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞ —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ ü§®"."""
    button = ReplyKeyboardMarkup([[HAVE_MERCY_BTN]], resize_keyboard=True)
    for text in txt.AWESOM_O_STORY[:-1]:
        update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
        time.sleep(1)
    update.message.reply_text(txt.AWESOM_O_STORY[-1], reply_markup=button)


def have_mercy_answer(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û, –Ω–µ—Ç! –®.–ò.–ö.–ê.–†.–ù.-–û, –ø–æ—â–∞–¥–∏ üò®üôè"."""
    button = ReplyKeyboardMarkup([[KOMBIKORM_BTN], [NO_FUNNY_BTN]],
                                 resize_keyboard=True)
    update.message.reply_text(text='–†–∞—Å—Å–ª–∞–±—å—Å—è! –®.–ò.–ö.–ê.–†.–ù.-–û –ø–æ—à—É—Ç–∏–ª\n–ë—É–¥—É –∫–æ—Ä–º–∏—Ç—å —Ç–µ–±—è '
                                   '–∫–æ–º-–±–∏–∫–æ—Ä–º–æ–º.\n–ò–ª–∏ —á—Ç–æ –≤—ã —Ç–∞–º –µ–¥–∏-—Ç–µ? üòé',
                              reply_markup=button)


def no_funny_or_kombikorm(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã "–û—á–µ–Ω—å —Å–º–µ—à–Ω–æ üò§" –∏ "–ö–æ–º–±–∏–∫–æ—Ä–º! –ú–º–º... –í–∫—É—Å–Ω—è—Ç–∏–Ω–∞ üòã"."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == KOMBIKORM_BTN:
        text = txt.DOSIER
    else:
        text = txt.NO_FUNNY
    for phrase in text[:-1]:
        update.message.reply_text(phrase, reply_markup=ReplyKeyboardRemove())
        time.sleep(1.5)
    update.message.reply_text(text[-1], reply_markup=button)


def secret_dossier(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ "–§–∞–ª–∞—Ñ–µ–ª—å"."""
    button = ReplyKeyboardMarkup([[RED_BTN]], resize_keyboard=True)
    for text in txt.DOSSIER_TEXT[:-1]:
        update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
        time.sleep(2)
    update.message.reply_text(text=txt.DOSSIER_TEXT[-1], reply_markup=button)
    return FALAFEL


def cancel_secret_dossier(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ üî¥"."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    for text in txt.SELFDESTRUCTION[:-1]:
        update.message.reply_text(text=text)
        time.sleep(1.5)
    update.message.reply_text(txt.SELFDESTRUCTION[-1], reply_markup=button)
    return ConversationHandler.END


def show_secret_dossier(update, _):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—å–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    phrase_answer = {CREATOR: txt.WHO_IS_CREATOR, KEP4IK: txt.WHO_IS_KEP,
                     INNA: txt.WHO_IS_INNA, LEMUR: txt.WHO_IS_NATASHA,
                     ZAJA: txt.WHO_IS_ZAJA, MARIK: txt.WHO_IS_MARIK,
                     MARINA: txt.WHO_IS_MARINA}
    for phrase, answer in phrase_answer.items():
        if re.match(phrase, update.message.text):
            for text in answer:
                update.message.reply_text(text=text)
                time.sleep(2)
            break


def bad_command(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ –§–∞–ª–∞—Ñ–µ–ª—å."""
    update.message.reply_text(text='–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ üö´')


def show_hidden_phrases(update, _):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /hidden - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã-–ø–∞—Å—Ö–∞–ª–∫–∏ –¥–ª—è –±–æ—Ç–∞."""
    update.message.reply_text(
        '*** –ü–∞—Å—Ö–∞–ª–∫–∏ ***\nüî∏ –û–Ω–∏ —É–±–∏–ª–∏ –ö–µ–Ω–Ω–∏\nüî∏ –ü—Ä–∏—Ç–≤–æ—Ä–∏—Å—å –Ω–æ–ª–∏–∫–æ–º\n'
        'üî∏ –≠—Ä–∏–∫ –ö–∞—Ä—Ç–º–∞–Ω\nüî∏ –ú–∞—Ä–∫–ª–∞—Ä'
    )


def answer_hidden_phrases(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã-–ø–∞—Å—Ö–∞–ª–∫–∏."""
    phrase_answer = {'–ú–∞—Ä–∫–ª–∞—Ä': txt.MARKLAR_ANSWER,
                     ZERO: '–ú–æ–∂–µ—Ç –µ—â—ë –∫—Ä–µ—Å-—Ç–∏–∫–æ–º –Ω–∞—á–∞—Ç—å –≤—ã—à–∏–≤–∞—Ç—å? üôÑ',
                     CARTMAN: txt.CARTMAN,
                     KENNY: '–°–≤–æ–ª–æ—á–∏! üò°'}
    for phrase, answer in phrase_answer.items():
        if re.match(phrase, update.message.text):
            update.message.reply_text(text=answer)
            break


def no_play_or_game_rules(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üôÖüèª‚Äç‚ôÇÔ∏è" –∏ "–ò–∑–∏! –î–æ—Å—Ç–∞–≤–∞–π ü§†"."""
    if update.message.text == NEXT_TIME_BTN:
        main = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text('–ö–∞–∫ –∑–Ω–∞–µ—à—å. –£–≥–æ–≤–∞-—Ä–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É üòº', reply_markup=main)
    else:
        global game_stat, PLAYER, bot_wins, user_wins, user_dice_counter, user_dice_result, triple_bet_bot, triple_bet_user
        bot_wins, user_wins, user_dice_counter, user_dice_result, triple_bet_bot, triple_bet_user = [0] * 6
        PLAYER = update.message.chat.full_name
        init_stat = dict(wins=0, dry_wins=0, triple_bet=0, double_six=0, double_one=0, made_bet=0, guessed_bet=0)
        game_stat = {'BOT': init_stat, f'{PLAYER}': init_stat.copy()}
        print(game_stat)
        button = ReplyKeyboardMarkup([[BEGIN_BTN], [HALL_OF_FAME_BTN]], resize_keyboard=True)
        for text in txt.RULES_DICE:
            update.message.reply_text(text, reply_markup=button if text == txt.RULES_DICE[-1] else ReplyKeyboardRemove())
            time.sleep(1)
        return BOT_DICE


def bot_bet_roll_dice(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–µ—Ö–∞–ª–∏ üëå", "–¢–≤–æ–π —Ö–æ–¥ üëÜ", "–•–æ—á—É —Ä–µ–≤–∞–Ω—à ü•ä" –∏ "–î–∞–º —Ç–µ–±–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è üòô"."""
    cancel = ReplyKeyboardMarkup([[NO_MORE_GAME_BTN]], resize_keyboard=True)
    choice = ReplyKeyboardMarkup([[REVENGE_BTN], [CATS_TRAIN_BTN]], resize_keyboard=True)
    global bot_wins, user_wins, triple_bet_bot, triple_bet_user
    if update.message.text == REVENGE_BTN:
        update.message.reply_text('–ù–µ –ª—é–±–∏—à—å –ø—Ä–æ–∏–≥—Ä—ã-–≤–∞—Ç—å? –ù—É-–Ω—É!\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üòé'); time.sleep(1)
    if update.message.text == WIN_BACK_BTN:
        update.message.reply_text('–ù—É –≤—Å—ë - —à—É—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!\n–ë–æ–ª—å—à–µ –ø–æ–¥-–¥–∞–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É üò†'); time.sleep(1)
    bet_1, bet_2 = random.randint(3, 11), random.randint(3, 11)
    while bet_2 == bet_1:
        bet_2 = random.randint(3, 11)
    update.message.reply_text(f'–Ø –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞ {bet_1} –∏ {bet_2} ‚úçÔ∏è', reply_markup=ReplyKeyboardRemove())
    time.sleep(1)
    game_stat['BOT']['made_bet'] += 1; triple_bet_bot += 1
    update.message.reply_text('–ë—Ä–æ—Å–∞—é –∫–æ-—Å—Ç–∏... ‚úä')
    result = 0
    for _ in (1, 2):
        value = update.message.reply_dice()['dice']['value']
        result += value
        time.sleep(3)
    update.message.reply_text(f'–ú–æ–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç:  {result} ‚ùóÔ∏è', reply_markup=cancel)
    time.sleep(1)
    if result not in (bet_1, bet_2): triple_bet_bot = 0
    if result in (bet_1, bet_2, 2, 12):
        if result == 2:
            update.message.reply_text('–û, –Ω–µ—Ç! üò± –î–≤–µ –µ–¥–∏-–Ω–∏—á–∫–∏. –ú–∏–Ω—É—Å –±–∞–ª–ª üò≠')
            game_stat['BOT']['double_one'] += 1
            if bot_wins > 0: bot_wins -= 1
        elif result == 12:
            update.message.reply_text('–Ø —Å–æ-—Ä–≤–∞–ª –î–∂–µ–∫ –ø–æ—Ç ü•≥\n–î–≤–µ —à–µ—Å—Ç—ë—Ä–∫–∏! –ü–æ–ª—É—á–∞—é –±–∞–ª–ª üëè')
            game_stat['BOT']['double_six'] += 1
            bot_wins += 1
        else:
            update.message.reply_text('–£—Ä–∞! –ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ üòÑ\n–Ø –≤—ã-–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ ü¶æ')
            game_stat['BOT']['guessed_bet'] += 1
            bot_wins += 1
        if bot_wins == user_wins:
            update.message.reply_text(f'–°—á—ë—Ç {bot_wins} : {user_wins}\n–£ –Ω–∞—Å –Ω–∏—á—å—è üçª')
        else:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n' + ('–Ø –≤–ø–µ—Ä–µ–¥–∏ ü§ò' if bot_wins > user_wins else '–í —Ç–≤–æ—é –ø–æ–ª—å–∑—É üòï'))
        if bot_wins == 3:
            time.sleep(1.5)
            update.message.reply_text(
                f'–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç: üí´ {bot_wins} : {user_wins} üí´' + ('  –í—Å—É—Ö—É—é! –ö–∞–∫ –∫–æ—Ç—ë–Ω–∫–∞ üôà' if user_wins == 0 else '') +
                '\n\n' + '–ï—Ö—É—É—É ü•≥ –ü–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π!\n–£—á–∏—Å—å —É –º–∞—Å—Ç–µ—Ä–∞, —Å–∞–ª–∞–≥–∞ üòé',
                reply_markup=choice)
            game_stat['BOT']['wins'] += 1
            if user_wins == 0: game_stat['BOT']['dry_wins'] += 1
            if triple_bet_bot == 3: game_stat['BOT']['triple_bet'] += 1
            time.sleep(1.5)
            update.message.reply_text(func.dice_game_stat(game_stat, PLAYER))
            bot_wins, user_wins, triple_bet_bot, triple_bet_user = 0, 0, 0, 0
            return BOT_DICE
    else:
        update.message.reply_text('–ù–µ —É–≥–∞–¥–∞–ª üòî\n–õ–∞–¥–Ω–æ, –≤ —Å–ª–µ–¥—É—é-—â–∏–π —Ä–∞–∑ –ø–æ-–≤–µ–∑—ë—Ç...')
    time.sleep(1)
    update.message.reply_text('–¢–≤–æ—è –æ—á–µ-—Ä–µ–¥—å. –î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É ‚òùÔ∏è –∏ –±—Ä–æ—Å–∞–π –∫–æ-—Å—Ç–∏.', reply_markup=cancel)
    return USER_BET


def user_bets(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–≤—É—Ö —á–∏—Å–µ–ª –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤."""
    global user_bet_1, user_bet_2, triple_bet_user
    button = ReplyKeyboardMarkup([['üé≤']], resize_keyboard=True)
    user_bet_1, user_bet_2 = map(int, (update.message.text).split())
    if user_bet_1 == user_bet_2:
        update.message.reply_text('–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑-–Ω—ã–º–∏! –≠—Ç–æ –≤ —Ç–≤–æ–∏—Ö –∂–µ –∏–Ω—Ç–µ-—Ä–µ—Å–∞—Ö ü§¶üèª‚Äç‚ôÇÔ∏è')
    else:
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ! –ë—Ä–æ—Å–∞–π –∫–æ-—Å—Ç–∏ üé≤', reply_markup=button)
        game_stat[f'{PLAYER}']['made_bet'] += 1; triple_bet_user += 1
        return USER_DICE


def user_roll_dice(update, _):
    """–ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–º."""
    your_turn = ReplyKeyboardMarkup([[YOUR_TURN_BTN]], resize_keyboard=True)
    choice = ReplyKeyboardMarkup([[WIN_BACK_BTN], [EAT_CORN_BTN]], resize_keyboard=True)
    global user_dice_counter, user_dice_result, bot_wins, user_wins, triple_bet_user, triple_bet_bot
    points = update.message.dice['value']
    user_dice_counter += 1
    user_dice_result += points
    if user_dice_counter == 1:
        time.sleep(2)
        update.message.reply_text('–ë—Ä–æ—Å–∞–π –µ—â—ë üëâ')
        return
    time.sleep(3)
    update.message.reply_text(f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:  {user_dice_result} ‚ùóÔ∏è', reply_markup=your_turn)
    if user_dice_result not in (user_bet_1, user_bet_2): triple_bet_user = 0
    if user_dice_result in (user_bet_1, user_bet_2, 2, 12):
        if user_dice_result == 2:
            update.message.reply_text('–•–∞! –î–≤–µ –¥—ã—Ä–∫–∏ üôà –ù–µ –ø–æ–≤–µ–∑-–ª–æ. –ú–∏–Ω—É—Å –±–∞–ª–ª.')
            game_stat[f'{PLAYER}']['double_one'] += 1
            if user_wins > 0: user_wins -= 1
        elif user_dice_result == 12:
            update.message.reply_text('–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –î–≤–µ —à–µ—Å—Ç—ë—Ä–∫–∏ üò≥ –ü–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª.')
            game_stat[f'{PLAYER}']['double_six'] += 1
            user_wins += 1
        else:
            update.message.reply_text('–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ-—Ä–æ–Ω–µ.\n–¢—ã —É–≥–∞–¥–∞–ª –≤ —ç—Ç–æ—Ç —Ä–∞–∑ üòè')
            game_stat[f'{PLAYER}']['guessed_bet'] += 1
            user_wins += 1
        if user_wins == bot_wins:
            update.message.reply_text(f'–°—á—ë—Ç {bot_wins} : {user_wins}\n–£ –Ω–∞—Å –Ω–∏—á—å—è üçª')
        else:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n' + ('–Ø –≤–ø–µ—Ä–µ–¥–∏ üôÉ' if bot_wins > user_wins else '–í —Ç–≤–æ—é –ø–æ–ª—å–∑—É üòí'))
        if user_wins == 3:
            time.sleep(1.5)
            update.message.reply_text(
                f'–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç: üí´ {user_wins} : {bot_wins} üí´' + ('  –í—Å—É—Ö—É—é. –ß–∏—Ç–µ—Ä! üò†' if bot_wins == 0 else '') +
                '\n\n' + '–¢–≤–æ—è –ø–æ–±–µ–¥–∞!\n–ú–æ–∂–µ—à—å –ø–æ–ª–∞-–∫–æ–º–∏—Ç—å—Å—è –∫—É-–∫—É—Ä—É–∑–∫–æ–π üåΩ\n–ù–æ –Ω–µ –∑–∞-–∑–Ω–∞–≤–∞–π—Å—è - —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑-–ª–æ üòà\n–ü–æ–Ω–∏–º–∞–µ—à—å, –¥–∞?',
                reply_markup=choice)
            game_stat[f'{PLAYER}']['wins'] += 1
            if bot_wins == 0: game_stat[f'{PLAYER}']['dry_wins'] += 1
            if triple_bet_user == 3: game_stat[f'{PLAYER}']['triple_bet'] += 1
            time.sleep(1.5)
            update.message.reply_text(func.dice_game_stat(game_stat, PLAYER))
            bot_wins, user_wins, triple_bet_user, triple_bet_bot = 0, 0, 0, 0
    else:
        update.message.reply_text('–ù–µ —É–≥–∞–¥–∞–ª ü§∑üèª‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ, –±—ã–≤–∞–µ—Ç...\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ-—Å–µ–ª–∏—Ç—å—Å—è üòâ', reply_markup=your_turn)
    user_dice_counter, user_dice_result = 0, 0
    return BOT_DICE


def cancel_game(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ë–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—å üòê", "–¢–æ—á–Ω–æ! –•–≤–∞—Ç–∏—Ç üñê",
    "–ü–æ–π–¥—É –≥—Ä—ã–∑—Ç—å —Å–≤–æ—é –∫—É–∫—É—Ä—É–∑–∫—É üòã" –∏ "–ü–æ–π–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞ –∫–æ—à–∫–∞—Ö üêà"."""
    confirm = ReplyKeyboardMarkup([[ENOUGH_BTN], ['–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª üôÉ']], resize_keyboard=True)
    main = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    text = update.message.text
    if text == NO_MORE_GAME_BTN:
        update.message.reply_text('–¢–æ—á–Ω–æ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ-–¥–æ–ª–∂–∞—Ç—å? üßê', reply_markup=confirm)
    if text == CATS_TRAIN_BTN or text == EAT_CORN_BTN or text == ENOUGH_BTN:
        update.message.reply_text('–õ–∞–¥–Ω–æ. –ó–∞-—Ö–æ—á–µ—à—å –µ—â—ë —Å—ã–≥—Ä–∞—Ç—å - —Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ –º–µ–Ω—è –Ω–∞–π-—Ç–∏ üòº',
                                  reply_markup=main)
        return ConversationHandler.END


def show_hall_of_fame(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∂–∏ –∑–∞–ª —Å–ª–∞–≤—ã –∏–≥—Ä–æ–∫–æ–≤ ü§©"."""
    update.message.reply_text('üåü  –ó –ê –õ    –° –õ –ê –í –´  üåü\n'
                              '–í–æ—Ç –æ–Ω–∏ - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏, –±–æ—Ä—é-—â–∏–µ—Å—è –∑–∞ –∑–≤–∞–Ω–∏–µ –ê–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —á–µ–º-–ø–∏–æ–Ω–∞!\n'
                              '–ù–µ –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å-—Å—è –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ —Ä–µ–π—Ç–∏–Ω–≥–∞, –Ω–æ –ª—é–±–æ–π –º–æ–∂–µ—Ç –∏—Å-–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É üçÄüí™')
    update.message.reply_text('‚ö†Ô∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Ç—Ä–æ–π-–∫—É –ª–∏–¥–µ—Ä–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—ã-–≥—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 5 —Ä–∞—É–Ω–¥–æ–≤ ‚úÖ',
                              reply_markup=ReplyKeyboardMarkup([[BEGIN_BTN]], resize_keyboard=True))
    time.sleep(1)
    rating, last_champion = func.hall_of_fame()
    medals = ['ü•â', 'ü•à', 'ü•á']
    champion = ''
    places = '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n'
    rest = '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n'
    for person in rating:
        if person[5] >= 5 and medals:
            places += f'{medals[-1]}  ' + f'{person[-1]}' + '\n'
            medals.pop()
            if not champion:
                champion = f'–ß–µ–º–ø–∏–æ–Ω:  {person[-1]}  üëë\n'
                champ_name = person[-1]
        else:
            rest += f'{person[-1]}' + f'  >  –æ—Å—Ç–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å:  {5 - person[5]}\n' if person[5] < 5 else '  üîù\n'
    if champion:
        if champ_name != last_champion['name']:
            today = dt.date.today().strftime('%d.%m.%Y –≥.')
            db = shelve.open('statistic')
            last_champ = db['DICE_CHAMPION']
            last_champ['name'] = champ_name
            last_champ['date'] = today
            db['DICE_CHAMPION'] = last_champ
            db.close()
            champion_from_date = today + '\n'
        else:
            champion_from_date = last_champion['date'] + '\n'
    update.message.reply_text(champion + ('–ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª ' if champion else '') + (champion_from_date if champion else '') + places + rest)
    for (share_of_wins, average_dice_to_win, share_of_guessed_bet, dry_wins, triple_bet, games, wins, looses,
         made_bet, guessed_bet, double_six, share_of_double_six, double_one, share_of_double_one,
         share_of_dry_wins, share_of_triple_bet, name) in rating:
        update.message.reply_text(
            f'üî∏ {name} üî∏  –°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤:  {games}\n–ü–æ–±–µ–¥—ã:  {wins} ~ {-share_of_wins:.1f}%    –ü–æ—Ä–∞–∂–µ–Ω–∏—è:  {looses}\n'
            f'–ü–æ–±–µ–¥—ã "–≤—Å—É—Ö—É—é" (—Å—á—ë—Ç 3:0):  {-dry_wins} ~ {share_of_dry_wins:.1f}%\n'
            f'–ü–æ–±–µ–¥—ã "–±–µ–∑ —à–∞–Ω—Å–æ–≤" (—É–≥–∞–¥–∞–Ω—ã –ø–æ–¥—Ä—è–¥ —Ç—Ä–∏ —Å—Ç–∞–≤–∫–∏):  {-triple_bet} ~ {share_of_triple_bet:.1f}%\n'
            f'–í —Å—Ä–µ–¥–Ω–µ–º –±—Ä–æ—Å–∫–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã:  {average_dice_to_win:.1f}\n–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:  {made_bet}  –£–≥–∞–¥–∞–Ω–æ:  {guessed_bet} ~ {-share_of_guessed_bet:.1f}%\n'
            f'6Ô∏è‚É£6Ô∏è‚É£ –≤—ã–ø–∞–¥–∞–ª–∏:  {double_six} ~ {share_of_double_six:.1f}%\n1Ô∏è‚É£1Ô∏è‚É£ –≤—ã–ø–∞–¥–∞–ª–∏:  {double_one} ~ {share_of_double_one:.1f}%\n'
        )
    update.message.reply_text('–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤(–∞) —Å–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ-–≥–æ —á–µ–º–ø–∏–æ–Ω–∞? –ö–∞–∂–µ—Ç—Å—è, –æ–Ω —É–∂–µ –∑–∞—Å–∏–¥–µ–ª—Å—è... ü§´')
    return BOT_DICE


def place_bet(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–∞."""
    update.message.reply_text('–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ-–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É ü§®\n–í–≤–µ–¥–∏ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ-–±–µ–ª:\n–º–∏–Ω–∏–º—É–º 3Ô∏è‚É£, –º–∞–∫—Å–∏–º—É–º 1Ô∏è‚É£1Ô∏è‚É£.')


def go_on(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–º."""
    update.message.reply_text('–¢–µ–±–µ –Ω—É-–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫. –°–æ—Å—Ä–µ-–¥–æ—Ç–æ—á—å—Å—è ü§®')


def dice_fallback(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏."""
    update.message.reply_text('–ò–¥—ë—Ç –∏–≥—Ä–∞. –ù–µ –æ—Ç–≤–ª–µ-–∫–∞–π—Å—è ü§®')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updater = Updater(token=TOKEN)
    handler = updater.dispatcher.add_handler
    handler(CommandHandler('start', wake_up))
    birthday_—Åonversation = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(SURPRISE_ME_BTN), birthday_init)],
        states={
            BIRTH_1: [MessageHandler(Filters.regex(STUPID_BTN + OR + NOT_STUPID_BTN), cancel_or_birthday_1)],
            BIRTH_2: [MessageHandler(Filters.regex(DONE_NEXT_BTN + OR + r'^\d{1,2}$'), birthday_2)],
            BIRTH_3: [MessageHandler(Filters.regex(MATH_BAD_BTN + OR + r'^\d{3,4}$'), birthday_3)],
            BIRTH_4: [MessageHandler(Filters.regex(r'^\d{3,4}$'), birthday_4)],
            BIRTH_5: [MessageHandler(Filters.regex(NOT_MY_BIRTH_BTN + OR + EXTRASENS_BTN), birthday_finish)],
        },
        fallbacks=[MessageHandler(Filters.all, birth_fallback)]
    )
    handler(birthday_—Åonversation)
    falafel_—Åonversation = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^–§–∞–ª–∞—Ñ–µ–ª—å$'), secret_dossier)],
        states={
            FALAFEL: [MessageHandler(Filters.regex(HAVE_DOSSIERS), show_secret_dossier),
                      MessageHandler(Filters.regex(RED_BTN), cancel_secret_dossier)],
        },
        fallbacks=[MessageHandler(Filters.all, bad_command)]
    )
    handler(falafel_—Åonversation)
    dice_game_—Åonversation = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(NEXT_TIME_BTN + OR + LETS_PLAY_BTN), no_play_or_game_rules)],
        states={
            BOT_DICE: [MessageHandler(Filters.regex(BEGIN_BTN + OR + YOUR_TURN_BTN + OR + REVENGE_BTN + OR + WIN_BACK_BTN),
                                      bot_bet_roll_dice),
                       MessageHandler(Filters.regex(CATS_TRAIN_BTN + OR + EAT_CORN_BTN), cancel_game),
                       MessageHandler(Filters.regex(HALL_OF_FAME_BTN), show_hall_of_fame)],
            USER_BET: [MessageHandler(Filters.regex(BET_RANGE), user_bets),
                       MessageHandler(Filters.regex(NO_MORE_GAME_BTN + OR + ENOUGH_BTN), cancel_game),
                       MessageHandler(Filters.all, place_bet)],
            USER_DICE: [MessageHandler(Filters.dice, user_roll_dice),
                        MessageHandler(Filters.all, go_on)],
        },
        fallbacks=[MessageHandler(Filters.all, dice_fallback)]
    )
    handler(dice_game_—Åonversation)
    handler(MessageHandler(Filters.regex(PETTING_BTN), stop_petting))
    handler(MessageHandler(Filters.regex(STRANGE_NAME_BTN), strange_name))
    handler(MessageHandler(Filters.regex(CAT_BTN), show_cat_picture))
    handler(MessageHandler(Filters.regex(ANECDOTE_BTN), show_anecdote))
    handler(MessageHandler(Filters.regex(SO_SO_BTN + OR + BRAVO_BTN), bravo_or_so_so))
    handler(MessageHandler(Filters.regex(SONG_BTN), some_song))
    handler(MessageHandler(Filters.regex(HANDS_UP_BTN + OR + MORE_TALANTS_BTN), song_reaction))
    handler(MessageHandler(Filters.regex(WHAT_ARE_YOU_BTN), what_are_you))
    handler(MessageHandler(Filters.regex(HAVE_MERCY_BTN), have_mercy_answer))
    handler(MessageHandler(Filters.regex(KOMBIKORM_BTN + OR + NO_FUNNY_BTN), no_funny_or_kombikorm))
    handler(MessageHandler(Filters.regex(HIDDEN_PHRASES), answer_hidden_phrases))
    handler(MessageHandler(Filters.all & ~Filters.command, default_answer))
    handler(CommandHandler('hidden', show_hidden_phrases))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    # start_logging()
    main()
