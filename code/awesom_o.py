"""–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –®.–ò.–ö.–ê.–†.–ù.-–û."""

import datetime as dt
import logging
import os
import random
import re
import shelve
import time
from pathlib import Path

import functions as func
import pyowm
import requests
import texts_for_bot as txt
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from pyowm.utils import timestamps
from telegram import (Bot, InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove)
from telegram.ext import (CallbackQueryHandler, CommandHandler,
                          ConversationHandler, Filters, MessageHandler,
                          Updater)

load_dotenv()
BOT_TOKEN = os.getenv('AWESOM_O_TOKEN')
OWM_TOKEN = os.getenv('OPENWEATHERMAP_TOKEN')
bot = Bot(token=BOT_TOKEN)
config = pyowm.utils.config.get_default_config()
config['language'] = 'ru'
owm = pyowm.OWM(OWM_TOKEN, config)
weather_manager = owm.weather_manager()

STATISTIC_PATH = str(Path(__file__).resolve().parent / 'statistic/statistic')

ADORE_HOROSCOPE_BTN = ('–£—Ö —Ç—ã! –û–±–æ–∂–∞—é –≥–æ—Ä–æ—Å–∫–æ–ø—ã üòç –û–Ω–∏ –≤—Å–µ–≥–¥–∞ —Å–±—ã–≤–∞—é—Ç—Å—è! '
                       '–ò –≤–æ–æ–±—â–µ, –º–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ - —Å–∞–º—ã–π –ª—É—á—à–∏–π ü§ò')
ANECDOTE_BTN = '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç üòÉ'
BEGIN_BTN = '–ü–æ–µ—Ö–∞–ª–∏ üëå'
BRAVO_BTN = '–ë—Ä–∞–≤–æ! –≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ ü§£'
CAT_BTN = '–ö–æ—Ç–∏–∫–∞ —Ö–æ—á—É üêà'
CATS_TRAIN_BTN = '–ü–æ–π–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞ –∫–æ—à–∫–∞—Ö üêà'
DICE_BTN = ReplyKeyboardMarkup([['üé≤']], resize_keyboard=True)
DONE_NEXT_BTN = '–°–¥–µ–ª–∞–Ω–æ ‚úîÔ∏è –î–∞–≤–∞–π –¥–∞–ª—å—à–µ'
EAT_CORN_BTN = '–ü–æ–π–¥—É –≥—Ä—ã–∑—Ç—å —Å–≤–æ—é –∫—É–∫—É—Ä—É–∑–∫—É üòã'
ENOUGH_BTN = '–¢–æ—á–Ω–æ! –•–≤–∞—Ç–∏—Ç üñê'
EXTRASENS_BTN = '–ö—Ä—É—Ç–æ! –¢—ã —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å üò≤'
HALL_OF_FAME_BTN = '–ó–∞–ª –°–ª–∞–≤—ã üåü'
HAVE_MERCY_BTN = '–û, –Ω–µ—Ç! –®.–ò.–ö.–ê.–†.–ù.-–û, –ø–æ—â–∞–¥–∏ üò®üôè'
I_NEED_IT_BTN = '–î–∞ –±—Ä–æ—Å—å! –ú–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ –Ω—É–∂–Ω–æ üòë'
KOMBIKORM_BTN = '–ö–æ–º–±–∏–∫–æ—Ä–º! –ú–º–º... –í–∫—É—Å–Ω—è—Ç–∏–Ω–∞ üòã'
LETS_PLAY_BTN = '–ò–∑–∏! –°–æ–∑–¥–∞–≤–∞–π ü§†'
MATH_BAD_BTN = '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —è–≤–Ω–æ –Ω–µ –º–æ—ë üòî'
NEGATIVE_BTN = '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª üôÉ'
NEXT_TIME_BTN = '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üôÖüèª‚Äç‚ôÇÔ∏è'
NO_FUNNY_BTN = '–û—á–µ–Ω—å —Å–º–µ—à–Ω–æ üò§'
NO_MORE_GAME_BTN = '–ë–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—å üòê'
NOT_MY_BIRTH_BTN = '–ù–µ–∞, –Ω–µ–≤–µ—Ä–Ω–æ! ü§®'
NOT_STUPID_BTN = '–Ø —Ç–µ–±–µ –Ω–µ —Ç—É–ø–∏—Ü–∞! üò§'
RED_BTN = '–ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ üî¥'
REVENGE_BTN = '–•–æ—á—É —Ä–µ–≤–∞–Ω—à ü•ä'
SO_INTERESTING_BTN = '–ê —ç—Ç–æ —É–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î'
SO_SO_BTN = '–ù—É, —Ç–∞–∫–æ–µ —Å–µ–±–µ üôÑ'
STRANGE_NAME_BTN = '–°—Ç—Ä–∞–Ω–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è ü§î'
STUPID_BTN = '–Ø —Ç—É–ø–∏—Ü–∞... üò¢'
SURPRISE_ME_BTN = '–ê –Ω—É-–∫–∞, —É–¥–∏–≤–∏! üòê'
TALANTS_BTN = '–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ç–∞–ª–∞–Ω—Ç—ã ü§®'
TOMORROW_BTN = '–ê —á—Ç–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?'
WHAT_ARE_YOU_BTN = '–î–∞ —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ ü§®'
WIN_BACK_BTN = '–î–∞–º —Ç–µ–±–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è üòô'
WILL_CHECK_BTN = '–í–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏–º!'
YOUR_TURN_BTN = '–¢–≤–æ–π —Ö–æ–¥ üëÜ'
MAIN_MENU = [[CAT_BTN, ANECDOTE_BTN], [TALANTS_BTN, WHAT_ARE_YOU_BTN]]

BET_RANGE = r'^([3-9]|[1][0-1]) ([3-9]|[1][0-1])$'
CARTMAN = r'.*–≠—Ä–∏–∫[–∞–µ]? –ö–∞—Ä—Ç–º–∞–Ω[–∞–µ]?'
CREATOR = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –°–æ–∑–¥–∞—Ç–µ–ª—å\??$'
INNA = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –ú—ã—à–∞\??$'
KENNY = r'.*[–û–æ]–Ω–∏ —É–±–∏–ª–∏ –ö–µ–Ω+–∏'
KEP4IK = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ö—ç–ø\??$'
LEMUR = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –õ–µ–º—É—Ä\??$'
MARIK = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ú–∞—Ä–∏–∫\??$'
MARINA = r'^–ö—Ç–æ —Ç–∞–∫–∞—è –ú–∞—Ä–∏—à–∫–∞\??$'
MARKLAR = r'.*[–ú–º]–∞—Ä–∫–ª–∞—Ä'
ZAJA = r'^–ö—Ç–æ —Ç–∞–∫–æ–π –ó–∞–∂–∞\??$'
ZERO = r'.*[–ü–ø]—Ä–∏—Ç–≤–æ—Ä[–∏—è](—Å—å|—Ç—å?—Å—è) –Ω–æ–ª–∏–∫–æ–º'
CITY_NAME = '^[–Å—ë–ê-—è]{1,15}-? ?[–Å—ë–ê-—è]{1,10}-? ?[–Å—ë–ê-—è]{1,10}$'
HIDDEN_PHRASES = f'{KENNY}|{CARTMAN}|{ZERO}|{MARKLAR}'
HAVE_DOSSIERS = f'{CREATOR}|{KEP4IK}|{INNA}|{LEMUR}|{ZAJA}|{MARIK}|{MARINA}'

BIRTH_1, BIRTH_2, BIRTH_3, BIRTH_4, BIRTH_5 = range(5)
FALAFEL = 1
BOT_DICE, USER_BET, USER_DICE = range(3)
HOROSCOPE_1, HOROSCOPE_2 = 1, 2
WEATHER_1, WEATHER_2 = 1, 2


def show_hidden_phrases(update, _):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /hidden - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã-–ø–∞—Å—Ö–∞–ª–∫–∏ –¥–ª—è –±–æ—Ç–∞."""
    update.message.reply_text(
        '*** –ü–∞—Å—Ö–∞–ª–∫–∏ ***\nüî∏ –û–Ω–∏ —É–±–∏–ª–∏ –ö–µ–Ω–Ω–∏\nüî∏ –ü—Ä–∏—Ç–≤–æ—Ä–∏—Å—å –Ω–æ–ª–∏–∫–æ–º\n'
        'üî∏ –≠—Ä–∏–∫ –ö–∞—Ä—Ç–º–∞–Ω\nüî∏ –ú–∞—Ä–∫–ª–∞—Ä'
    )


def answer_hidden_phrases(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã-–ø–∞—Å—Ö–∞–ª–∫–∏."""
    phrase_answer = {MARKLAR: txt.MARKLAR_ANSWER,
                     ZERO: '–ú–æ–∂–µ—Ç –µ—â—ë –∫—Ä–µ—Å-—Ç–∏–∫–æ–º –Ω–∞—á–∞—Ç—å –≤—ã—à–∏–≤–∞—Ç—å? üôÑ',
                     CARTMAN: txt.CARTMAN,
                     KENNY: '–°–≤–æ–ª–æ—á–∏! üò°'}
    for phrase, answer in phrase_answer.items():
        if re.match(phrase, update.message.text):
            update.message.reply_text(text=answer)
            break


def show_visitors(update, _):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /visitors - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–æ—Ç–∞."""
    update.message.reply_text(text=func.visitors_list())


def default_answer(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    answers = ('–ß—ë –¥—É—à–∏—à—å –º–µ–Ω—è? üò†', '–ù—É —è—Å–Ω–æ! –ß—Ç–æ –µ—â—ë —Å–∫–∞–∂–µ—à—å? ü§®',
               '–®.–ò.–ö.–ê.–†.–ù.-–û –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–π –¥–∏–∞–ª–µ–∫—Ç ü§∑üèª‚Äç‚ôÄÔ∏è',
               '–û—Ç–∫–∞–∑–∞–Ω–æ! –õ—É—á—à–µ –ø–æ—á–∏—Å—Ç–∏ –º–æ–∏ —Ç—Ä–∞–Ω-–∑–∏—Å-—Ç–æ—Ä—ã ü™õüîß',
               '–†–∞–º–∞–º–±–∞ –•–∞—Ä—É –ú–∞–º–±—É—Ä—É ü§™')
    update.message.reply_text(random.choice(answers))


def push_button(update, _):
    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É."""
    update.message.reply_text(
        '–î–∞–≤–∞–π –±–µ–∑ –∏–º–ø—Ä–æ–≤–∏–∑–∞-—Ü–∏–∏. –°–µ–π—á–∞—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞-–∂–∞—Ç—å –Ω—É–∂–Ω–æ üôÑ'
    )


def wake_up(update, _):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é /start."""
    func.record_new_visitor(update)
    name = update.message.chat.first_name
    text = (f'–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ä–æ–±–æ—Ç –®.–ò.–ö.–ê.–†.–ù.-–û —á–µ—Ç—ã—Ä–µ —Ç—ã—Å—è—á–∏ ü§ñ',
            '–í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞–Ω–æ-–∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∏–æ-—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π '
            '–æ—Ä–≥–∞–Ω–∏–∑–º ‚öôÔ∏è', '–ú–æ–∂–µ—à—å –º–µ–Ω—è –ø–æ–≥–ª–∞–¥–∏—Ç—å üôÉ', '...')
    button = InlineKeyboardMarkup([
        [InlineKeyboardButton(text='–ü–æ–≥–ª–∞–¥–∏—Ç—å', callback_data='stop_petting')]
    ])
    for phrase in text:
        bot.send_message(update.effective_chat.id, text=phrase,
                         reply_markup=button if phrase == text[-1] else None)
        time.sleep(1.5)


def stop_petting(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–ª–∞–¥–∏—Ç—å"."""
    chat = update.effective_chat
    text = ('–®.–ò.–ö.–ê.–†.–ù.-–û –Ω—Ä–∞–≤–∏—Ç—Å—è.', '–®.–ò.–ö.–ê.–†.–ù.-–û —Ö–æ—Ä–æ—à–æ.',
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π', '...', '–•–≤–∞—Ç–∏—Ç —Ç—Ä–æ-–≥–∞—Ç—å –º–æ—é –±–∞-—Ç–∞—Ä–µ–π–∫—É! üò†')
    button = ReplyKeyboardMarkup([[STRANGE_NAME_BTN]], resize_keyboard=True)
    query = update.callback_query
    query.answer()  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞!
    query.edit_message_text(text='‚úîÔ∏è')
    time.sleep(1)
    for phrase in text:
        bot.send_message(chat.id, phrase,
                         reply_markup=button if phrase == text[-1] else None)
        time.sleep(1.5)


def strange_name(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {STRANGE_NAME_BTN}."""
    text = ('–Ø –Ω–∞-–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞-–∂–∞ 2 —Å–µ—Ä–∏–∏ 8 —Å–µ–∑–æ–Ω–∞ –º—É–ª—å—Ç—Å–µ-'
            '—Ä–∏–∞–ª–∞ "South Park".\n–ï—Å–ª–∏ –Ω–µ –ø–æ-—Å–º–æ—Ç—Ä–∏—à—å –µ—ë, –®.–ò.–ö.–ê.–†.–ù.-–û '
            '–±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–Ω—ã–º –ø–∞–Ω–¥–æ–π üêº\nhttp://online-south-park.ru/season-8/'
            '130-8-sezon-2-seriya-shikarn-o.html')
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    update.message.reply_text(text, reply_markup=button)


def get_new_cat_image(update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∏–∫–∞ –∏–ª–∏ –ø—ë—Å–∏–∫–∞."""
    cats_url = 'https://api.thecatapi.com/v1/images/search'
    dogs_url = 'https://api.thedogapi.com/v1/images/search'
    try:
        response = requests.get(cats_url).json()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        response = requests.get(dogs_url).json()
        update.message.reply_text('–£–ø—Å! –ö–æ—Ç–∏–∫–æ–≤ –Ω–µ –ø–æ–¥–≤–µ–∑–ª–∏. –í–æ—Ç —Ç–µ–±–µ –ø—ë—Å–∏–∫ üê∂')
    return response[0].get('url')


def show_cat_picture(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {CAT_BTN}."""
    update.message.reply_text(
        text='–®.–ò.–ö.–ê.–†.–ù.-–û –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üòª –ö—ã—Å-–∫—ã—Å-–∫—ã—Å!',
        reply_markup=ReplyKeyboardRemove()
    )
    time.sleep(1)
    update.message.reply_photo(get_new_cat_image(update))
    time.sleep(1)
    update.message.reply_text(
        text=random.choice(txt.SHOW_CAT_TEXT),
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    )


def talants(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {TALANTS_BTN}."""
    buttons = [
        InlineKeyboardButton(text='–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data='–î'),
        InlineKeyboardButton(text='–ì–æ—Ä–æ—Å–∫–æ–ø', callback_data='–ì'),
        InlineKeyboardButton(text='–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏', callback_data='–ö'),
        InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∞', callback_data='–ü')
    ]
    update.message.reply_text(
        text='–î–∞ —è –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–¥–µ–∑—å —Ç–∞-–ª–∞–Ω—Ç–æ–≤ ü§ì',
        reply_markup=ReplyKeyboardRemove()
    )
    time.sleep(1)
    update.message.reply_text(
        text='–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –º–∞–ª–∞—è —á–∞—Å—Ç—å...',
        reply_markup=InlineKeyboardMarkup(func.inline_menu(buttons, 1))
    )


def choice_talant(update, _):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ "—Ç–∞–ª–∞–Ω—Ç–æ–≤" –±–æ—Ç–∞."""
    chat = update.effective_chat
    query = update.callback_query
    query_data = query.data
    if query_data == '–î':
        text = ('–°–∏–ª–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-–≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å-–Ω–æ–π –º—ã—Å–ª–∏ '
                '–º–æ–≥—É —É–≥–∞–¥–∞—Ç—å –¥–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è üßôüèª')
        button = [[SURPRISE_ME_BTN]]
    elif query_data == '–ì':
        text = '–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø ü§ì'
        button = [[SO_INTERESTING_BTN]]
    elif query_data == '–ö':
        text = '–ê –∫–∞–∫ –Ω–∞—Å—á—ë—Ç —Å—Ç–∞—Ä–æ–π –¥–æ–±—Ä–æ–π –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏? üòâ'
        button = [[LETS_PLAY_BTN], [NEXT_TIME_BTN]]
    elif query_data == '–ü':
        text = '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ —Ä–∞–¥–∏ —Ñ–æ—Ä–º–∞–ª—å-–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã! ü§®'
        button = [[I_NEED_IT_BTN]]
    query.answer()
    query.edit_message_text(text='‚úîÔ∏è')
    time.sleep(1)
    bot.send_message(
        chat_id=chat.id, text=text,
        reply_markup=ReplyKeyboardMarkup(button, resize_keyboard=True)
    )


def birthday_init(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {SURPRISE_ME_BTN}."""
    buttons = ReplyKeyboardMarkup([[NOT_STUPID_BTN], [STUPID_BTN]],
                                  resize_keyboard=True)
    update.message.reply_text(
        text='–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ-—Å—á–∏—Ç–∞—Ç—å. –í–æ–∑—å–º–∏ –∫–∞–ª—å–∫—É-–ª—è—Ç–æ—Ä. '
             '–ù–∞–¥–µ—é—Å—å, —Ç—ã —É–º–µ–µ—à—å –∏–º –ø–æ–ª—å-–∑–æ–≤–∞—Ç—å—Å—è? ü§≠',
        reply_markup=buttons
    )
    return BIRTH_1


def cancel_or_birthday_1(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã {STUPID_BTN} –∏ {NOT_STUPID_BTN}."""
    if update.message.text == STUPID_BTN:
        button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text(
            text='–ê —è —Å—Ä–∞–∑—É –ø–æ–Ω—è–ª, —á—Ç–æ —Å–æ–æ–±—Ä–∞–∂–∞–ª-–∫–∞ —É —Ç–µ–±—è –Ω–µ –æ—á–µ–Ω—å üôÑ\n'
                 '–ù—É –Ω–∏—á–µ–≥–æ. –û—Å–æ–∑–Ω–∞–Ω–∏–µ - –ø–µ—Ä–≤—ã–π –ø—É—Ç—å –∫ –∏—Å-–ø—Ä–∞–≤–ª–µ–Ω–∏—é!\n'
                 '–ù–∞—á–Ω–∏ —Å–æ —Å—á—ë—Ç–Ω—ã—Ö –ø–∞–ª–æ-—á–µ–∫... ü¶ß',
            reply_markup=button
        )
        return ConversationHandler.END
    else:
        button = ReplyKeyboardMarkup([[DONE_NEXT_BTN]], resize_keyboard=True)
        update.message.reply_text(
            text='–í–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏–º.\n–î–µ–π—Å—Ç–≤—É–π —Å–æ-–≥–ª–∞—Å–Ω–æ '
                 '–º–æ–∏–º —É–∫–∞–∑–∞-–Ω–∏—è–º ‚òùÔ∏è\n',
            reply_markup=ReplyKeyboardRemove()
        )
        time.sleep(1.5)
        update.message.reply_text(
            text='–ü–µ—Ä–≤—ã–º –¥–µ-–ª–æ–º —É–º–Ω–æ–∂—å —á–∏—Å–ª–æ —Å–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è –Ω–∞ 2 ‚òëÔ∏è\n'
                 '–ö —Ä–µ-–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–∏–±–∞–≤—å 5 ‚òëÔ∏è',
            reply_markup=button
        )
        return BIRTH_2


def birthday_2(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {DONE_NEXT_BTN}."""
    button = ReplyKeyboardMarkup([[MATH_BAD_BTN]], resize_keyboard=True)
    if update.message.text == DONE_NEXT_BTN:
        update.message.reply_text(
            text='–ü–æ–ª—É-—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂—å –Ω–∞ 50 ‚òëÔ∏è\n–ó–∞—Ç–µ–º –ø—Ä–∏–±–∞–≤—å –ø–æ—Ä—è–¥-–∫–æ–≤—ã–π'
                 ' –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ —Å–≤–æ–µ–≥–æ —Ä–æ-–∂–¥–µ–Ω–∏—è.\n'
                 '–ù–∞-–ø—Ä–∏–º–µ—Ä, —è–Ω–≤–∞—Ä—å - 1—ã–π, –¥–µ–∫–∞–±—Ä—å - 12—ã–π ‚òëÔ∏è',
            reply_markup=ReplyKeyboardRemove()
        )
        time.sleep(1.5)
        update.message.reply_text(
            text='–ù—É –∫–∞–∫? –¢–≤–æ–π –ø—Ä–æ-—Ü–µ—Å—Å–æ—Ä –µ—â—ë –Ω–µ –ø–µ—Ä–µ-–≥—Ä–µ–ª—Å—è? ü§Ø\n'
                 '–¢–µ—Ä–º–æ–ø–∞—Å—Ç—É –ø–æ–º–µ-–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ?',
            reply_markup=button
        )
        return BIRTH_3
    else:
        update.message.reply_text(
            text='–í–≤–µ–¥—ë—à—å —á–∏—Å–ª–æ, –∫–æ–≥–¥–∞ —è —Å–∫–∞-–∂—É ü§¶üèª‚Äç‚ôÇÔ∏è\n–í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞...'
        )
        return None


def birthday_3(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {MATH_BAD_BTN}."""
    if update.message.text == MATH_BAD_BTN:
        update.message.reply_text(
            text='–°–æ-–±–µ—Ä–∏—Å—å, —Ç—Ä—è–ø–∫–∞! üò† –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å—á–∏-—Ç–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n',
            reply_markup=ReplyKeyboardRemove()
        )
        time.sleep(1.5)
        update.message.reply_text(
            text='–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫ ü§ì\n'
                 '–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ-—Ä–æ–µ —É —Ç–µ–±—è –ø–æ-–ª—É—á–∏–ª–æ—Å—å.'
        )
        return BIRTH_4
    else:
        update.message.reply_text(
            text='–ù–µ –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ ü§¶üèª‚Äç‚ôÇÔ∏è\n–í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞...'
        )
        return None


def birthday_4(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ."""
    button = ReplyKeyboardMarkup([[EXTRASENS_BTN], [NOT_MY_BIRTH_BTN]],
                                 resize_keyboard=True)
    months = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è',
              6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è',
              11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}
    result = int(update.message.text) - 250
    day = result // 100
    month = months.get(result % 100)
    if not 0 < day <= 31 or month is None:
        update.message.reply_text('–ü–µ—Ä–µ–ø—Ä–æ-–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞ ‚òùÔ∏è')
        return None
    update.message.reply_text(text='–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å... ü•Å')
    time.sleep(1.5)
    update.message.reply_text(text=f'–î–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚öúÔ∏è {day} {month} ‚öúÔ∏è',
                              reply_markup=button)
    if str(result) == dt.date.today().strftime('%d%m'):
        time.sleep(1.5)
        update.message.reply_text(
            text='–¢–∞–∫ —ç—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ-–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º –í–∞—Ä–µ–Ω—å—è!\n'
                 '–†–∞—Å—Ç–∏ –±–æ–ª—å—à–æ–π, –Ω–µ –±—É–¥—å –ª–∞-–ø—à–æ–π ü•≥üéäüéâ'
        )
    return BIRTH_5


def birthday_finish(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã {EXTRASENS_BTN} –∏ {NOT_MY_BIRTH_BTN}."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == EXTRASENS_BTN:
        text = ('–Ø –∑–Ω–∞—é, —è –∫—Ä—É—Ç–æ–π üòé\n–° —Ç–µ–±—è 100$ üíµ\n'
                '–ü–µ-—Ä–µ–≤–µ–¥–∏ –Ω–∞ –º–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω-–Ω—ã–π –∫–æ—à–µ–ª—ë–∫')
    else:
        text = ('–î–∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∏-—Ç–∞—Ç—å –Ω–µ —É–º–µ–µ—à—å ü§¶üèª‚Äç‚ôÇÔ∏è\n–ê –µ—â—ë –≥–æ–≤–æ—Ä—è—Ç '
                '—á–µ–ª–æ–≤–µ–∫ - –≤–µ—Ä—à–∏–Ω–∞ —ç–≤–æ–ª—é—Ü–∏–∏.\n–ù—É-–Ω—É... ü§î')
    update.message.reply_text(text=text, reply_markup=button)
    return ConversationHandler.END


def birth_fallback(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –î–†."""
    update.message.reply_text(text='–¢–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥—ë—Ç...\n–î–∞–≤–∞–π, —Å–æ-'
                                   '—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –∏ –¥–µ–π—Å—Ç–≤—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫-—Ü–∏–∏ üßê')


def show_anecdote(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {ANECDOTE_BTN}."""
    url = ('https://anekdot.me/wiki/'
           '%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:'
           'RandomInCategory/%D0%90%D0%BD%D0%B5%D0%BA%D0%B4%D0%BE%D1%82%D1%8B')
    try:
        response = requests.get(url)
    # –° –ø–æ–º–æ—â—å—é –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_html = BeautifulSoup(response.text, 'html.parser')
    # –ò–∑ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã class='anekdot-centred-text',
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç.
        anecdote = page_html.select('.anekdot-centred-text')[0].get_text()
        text = ('–®.–ò.–ö.–ê.–†.–ù.-–û –∑–Ω–∞–µ—Ç –º–Ω–æ–≥–æ –∞-–Ω–µ–∫-–¥–æ-—Ç–æ–≤. –í–æ—Ç:', anecdote,
                '–ê—Ö–∞-—Ö–∞! –ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–µ–π—á–∞—Å –ª–æ–ø–Ω–µ—Ç –æ—Ç —Å–º–µ—Ö–∞ ü§£')
        button = ReplyKeyboardMarkup(
            [[SO_SO_BTN], [BRAVO_BTN]], resize_keyboard=True
        )
        for phrase in text:
            update.message.reply_text(
                phrase,
                reply_markup=(
                    ReplyKeyboardRemove() if phrase != text[-1] else button
                )
            )
            time.sleep(1.5)
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        update.message.reply_text(
            text='–î–æ–ª-–±–∞–Ω—ã–µ –≤—ã—à–∫–∏ 5G. –û–Ω–∏ –∂–≥—É—Ç –º–æ–∏ –º–∏–∫—Ä–æ-—Å—Ö–µ–º—ã üòï\n'
                 '–†–∞—Å—Å–∫–∞–∂—É –≤ —Å–ª–µ-–¥—É—é—â–∏–π —Ä–∞–∑...'
        )


def bravo_or_so_so(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã {SO_SO_BTN} –∏ {BRAVO_BTN}."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == BRAVO_BTN:
        text = ('–ú–æ–ª–æ–¥–µ—Ü! –í–æ–∑—å–º–∏ —Å –ø–æ–ª–∫–∏ –ø–∏—Ä–æ-–∂–æ–∫ ü•Ø',
                '–ï—â—ë –±—ã! –Ø —É—á–∏–ª-—Å—è —É —Å–∞–º–æ–≥–æ –ü–µ—Ç—Ä–æ—Å—è–Ω–∞ üòâ',
                '–°–º–æ—Ç—Ä–∏, —á—Ç–æ–± –ø—É-–ø–æ–∫ –æ—Ç —Å–º–µ—Ö–∞ –Ω–µ —Ä–∞–∑–≤—è-–∑–∞–ª—Å—è üôà')
    else:
        text = ('–£ —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —á—É-–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ üò§',
                '–≠—Ç–æ –¥–æ —Ç–µ–±—è –¥–æ–ª-–≥–æ –¥–æ—Ö–æ–¥–∏—Ç. –ö–∞–∫ –¥–æ –∂–∏—Ä–∞-—Ñ–∞ ü¶í',
                '–ò–¥–∏ —Å–º–æ—Ç—Ä–∏ –°–º–µ—Ö–æ–ø–∞–Ω–æ—Ä–∞-–º—É —Ç–æ–≥–¥–∞ üò†')
    update.message.reply_text(text=random.choice(text), reply_markup=button)


def zodiac_init_or_end(update, _):
    f"""
    –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {SO_INTERESTING_BTN} –∏ {ADORE_HOROSCOPE_BTN}.
    """
    zodiac_signs = (
        '–û–≤–µ–Ω ‚ôàÔ∏è', '–¢–µ–ª–µ—Ü ‚ôâÔ∏è', '–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôäÔ∏è', '–†–∞–∫ ‚ôãÔ∏è', '–õ–µ–≤ ‚ôåÔ∏è', '–î–µ–≤–∞ ‚ôçÔ∏è',
        '–í–µ—Å—ã ‚ôéÔ∏è', '–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôèÔ∏è', '–°—Ç—Ä–µ–ª–µ—Ü ‚ôêÔ∏è', '–ö–æ–∑–µ—Ä–æ–≥ ‚ôëÔ∏è', '–í–æ–¥–æ–ª–µ–π ‚ôíÔ∏è',
        '–†—ã–±—ã ‚ôìÔ∏è'
    )
    if update.message.text == ADORE_HOROSCOPE_BTN:
        update.message.reply_text(
            text='–ï—Å–ª–∏ –±—ã —É –º–µ-–Ω—è –±—ã–ª–∏ –ª–æ–± –∏ —Ä—É–∫–∞ - —è –±—ã —Å–µ–π—á–∞—Å —Å–¥–µ-–ª–∞–ª —Ñ—ç–π—Å'
                 '–ø–∞–ª–º ü§¶üèª‚Äç‚ôÇÔ∏è\n–ò, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–≤—Ä–µ–¥–∏–ª –±—ã —Å–µ–±–µ –º–∏-–∫—Ä–æ—Å—Ö–µ–º—ã...\n'
        )
        time.sleep(2)
        update.message.reply_text(
            text='–≠—Ç–æ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø —è —Å–∞–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã-–¥—É–º–∞–ª. '
                 '–Ø –¥—É–º–∞–ª —Ç—ã –≤ –∫—É—Ä—Å–µ, —á—Ç–æ –∞—Å—Ç—Ä–æ–ª–æ-–≥–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç\n'
                 '–ü–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É —Å–æ–≤–µ—Ç—É—é –ø–æ-—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ üëá',
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        update.message.reply_text(text='https://youtu.be/mrraDV0czzk')
        return ConversationHandler.END
    buttons = [InlineKeyboardButton(text=sign, callback_data=sign)
               for sign in zodiac_signs]
    update.message.reply_text(
        text='–ú–∏–Ω—É—Ç—É. –ù–∞—Å—Ç—Ä–∞-–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π üì°',
        reply_markup=ReplyKeyboardRemove()
    )
    time.sleep(2)
    update.message.reply_text(
        text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ-–¥–∏–∞–∫–∞ üîÆ',
        reply_markup=InlineKeyboardMarkup(func.inline_menu(buttons, 2))
    )
    return HOROSCOPE_1


def zodiac_result(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞. –í—ã–¥–∞—á–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
    result = (random.choice(txt.HOROSCOPE['first'])
              + random.choice(txt.HOROSCOPE['second'])
              + random.choice(txt.HOROSCOPE['second_add'])
              + random.choice(txt.HOROSCOPE['third']))
    query = update.callback_query
    query.answer()
    query.edit_message_text(text=f'–ì–æ-—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {query.data}')
    time.sleep(1)
    bot.send_message(
        chat_id=update.effective_chat.id, text=result,
        reply_markup=ReplyKeyboardMarkup([[ADORE_HOROSCOPE_BTN]],
                                         resize_keyboard=True)
    )
    return HOROSCOPE_2


def zodiac_choose_sign(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞."""
    update.message.reply_text(text='–í—ã–±–∏—Ä–∞–π –∑–Ω–∞–∫ –∏ –Ω–µ –≤—ã—ë..–∂–∏–≤–∞–π—Å—è üò†')


def weather_init(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {I_NEED_IT_BTN}."""
    update.message.reply_text(
        text='–õ–∞–¥–Ω–æ! –ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ —Ç–µ–±—è –∏–Ω-—Ç–µ—Ä–µ—Å—É–µ—Ç? üßê',
        reply_markup=ReplyKeyboardRemove()
    )
    return WEATHER_1


def weather_result(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    global city_name  # –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    mm_in_inch = 25.4
    city_name = update.message.text
    if not re.match(CITY_NAME, city_name):
        update.message.reply_text(text='–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚òùÔ∏è')
        return None
    try:
        observation = weather_manager.weather_at_place(city_name)
    except pyowm.commons.exceptions.NotFoundError:
        update.message.reply_text(
            text='–¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å! –û—á–µ–ø—è—Ç–∫–∞? ü§î'
        )
        return None
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã: {error}')
        update.message.reply_text(
            text='–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–∏–º –∏–Ω—Ñ–æ—Ä–º–∞-—Ç–æ—Ä–æ–º ‚òπÔ∏è\n'
                 '–ü–æ—Ö–æ–∂–µ –æ–Ω –æ–ø—è—Ç—å –∑–∞–±—ã–ª –æ–ø–ª–∞—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!\n'
                 '–î–∞–≤–∞–π –ø–æ-–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ...',
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return ConversationHandler.END
    else:
        weather = observation.weather
        detailed_status = weather.detailed_status
        temperature = round(weather.temperature(unit='celsius')['temp'])
        humidity = weather.humidity
        wind = weather.wind()['speed']
        pressure = round(
            weather.barometric_pressure(unit='inHg')['press'] * mm_in_inch
        )
        sunrise = (
            weather.sunrise_time(timeformat='date') + dt.timedelta(hours=3)
        ).time()
        sunrset = (
            weather.sunset_time(timeformat='date') + dt.timedelta(hours=3)
        ).time()
        answer = (
            f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ {city_name} - {detailed_status}.\n'
            f'–¢–µ–º-–ø–µ—Ä–∞—Ç—É—Ä–∞ üå° –≤–æ–∑–¥—É—Ö–∞ {temperature} ¬∞–°, –≤–ª–∞–∂–Ω–æ—Å—Ç—å '
            F'{humidity}%.\nC–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è-–µ—Ç {wind} –º/—Å üå¨\n'
            f'–ê—Ç–º–æ—Å—Ñ–µ—Ä-–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –º–º —Ä—Ç. —Å—Ç.\n'
            f'–í–æ—Å—Ö–æ–¥ –°–æ–ª–Ω—Ü–∞ –≤ {sunrise} üîÜ , –∑–∞–∫–∞—Ç –≤ {sunrset} üåÖ'
        )
        update.message.reply_text(
            text='–ú–∏–Ω—É-—Ç—É. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –ì–∏–¥—Ä–æ–º–µ–¥-—Ü–µ–Ω—Ç—Ä–æ–º... '
                 '–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ... üì†',
        )
        time.sleep(2)
        update.message.reply_text(text=answer)
        time.sleep(1)
        update.message.reply_text(
            text='–ò –ø–æ–º–Ω–∏: –º–µ—Ç–µ–æ—Ä–æ-–ª–æ–≥–∏ –Ω–µ –æ—à–∏–±–∞—é—Ç—Å—è! '
                 '–û–Ω–∏ –ø—Ä–æ—Å-—Ç–æ –º–æ–≥—É—Ç –ø–µ—Ä–ø—É—Ç–∞—Ç—å –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ ‚òùÔ∏èü§ì',
            reply_markup=ReplyKeyboardMarkup(
                [[TOMORROW_BTN], [WILL_CHECK_BTN]], resize_keyboard=True
            )
        )
        return WEATHER_2


def weather_tomorrow_or_end(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É {TOMORROW_BTN} –∏–ª–∏ {WILL_CHECK_BTN}."""
    if update.message.text == WILL_CHECK_BTN:
        text = '–£–¥–∞—á–∏!'
    else:
        forecast = weather_manager.forecast_at_place(city_name, '3h')
        tomorrow = timestamps.tomorrow()  # datetime object for tomorrow
        weather = forecast.get_weather_at(tomorrow)
        detailed_status = weather.detailed_status
        temperature = round(weather.temperature(unit='celsius')['temp'])
        text = (f'–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç {detailed_status} '
                f'—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä–æ–π –≤–æ–∑–¥—É—Ö–∞ {temperature} ¬∞–° üå°')
    update.message.reply_text(
        text=text,
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    )
    return ConversationHandler.END


def what_are_you(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {WHAT_ARE_YOU_BTN}."""
    button = ReplyKeyboardMarkup([[HAVE_MERCY_BTN]], resize_keyboard=True)
    for text in txt.AWESOM_O_STORY:
        update.message.reply_text(
            text,
            reply_markup=(button if text == txt.AWESOM_O_STORY[-1]
                          else ReplyKeyboardRemove())
        )
        time.sleep(1)


def have_mercy_answer(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {HAVE_MERCY_BTN}."""
    button = ReplyKeyboardMarkup([[KOMBIKORM_BTN], [NO_FUNNY_BTN]],
                                 resize_keyboard=True)
    update.message.reply_text(
        text='–†–∞—Å—Å–ª–∞–±—å—Å—è! –®.–ò.–ö.–ê.–†.–ù.-–û –ø–æ—à—É—Ç–∏–ª\n–ë—É–¥—É –∫–æ—Ä–º–∏—Ç—å —Ç–µ–±—è '
             '–∫–æ–º-–±–∏–∫–æ—Ä–º–æ–º.\n–ò–ª–∏ —á—Ç–æ –≤—ã —Ç–∞–º –µ–¥–∏-—Ç–µ? üòé',
        reply_markup=button
    )


def no_funny_or_kombikorm(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã {NO_FUNNY_BTN} –∏ {KOMBIKORM_BTN}."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    if update.message.text == KOMBIKORM_BTN:
        text = txt.DOSIER
    else:
        text = txt.NO_FUNNY
    for phrase in text:
        update.message.reply_text(
            phrase,
            reply_markup=(
                button if phrase == text[-1] else ReplyKeyboardRemove()
            )
        )
        time.sleep(1.5)


def secret_dossier(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "–§–∞–ª–∞—Ñ–µ–ª—å"."""
    button = ReplyKeyboardMarkup([[RED_BTN]], resize_keyboard=True)
    for text in txt.DOSSIER_TEXT:
        update.message.reply_text(
            text,
            reply_markup=(button if text == txt.DOSSIER_TEXT[-1]
                          else ReplyKeyboardRemove())
        )
        time.sleep(2)
    return FALAFEL


def show_secret_dossier(update, _):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—å–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    phrase_answer = {CREATOR: txt.WHO_IS_CREATOR, KEP4IK: txt.WHO_IS_KEP,
                     INNA: txt.WHO_IS_INNA, LEMUR: txt.WHO_IS_NATASHA,
                     ZAJA: txt.WHO_IS_ZAJA, MARIK: txt.WHO_IS_MARIK,
                     MARINA: txt.WHO_IS_MARINA}
    for phrase, answer in phrase_answer.items():
        if re.match(phrase, update.message.text):
            for text in answer:
                update.message.reply_text(text=text)
                time.sleep(2)
            break


def cancel_secret_dossier(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {RED_BTN}."""
    button = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    for text in txt.SELFDESTRUCTION:
        update.message.reply_text(
            text=text,
            reply_markup=button if text == txt.SELFDESTRUCTION[-1] else None
        )
        time.sleep(1.5)
    return ConversationHandler.END


def bad_command(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ –§–∞–ª–∞—Ñ–µ–ª—å."""
    update.message.reply_text(text='–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ üö´')


def no_play_or_game_rules(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ {NEXT_TIME_BTN} –∏ {LETS_PLAY_BTN}."""
    button_inl = InlineKeyboardMarkup(
        [[InlineKeyboardButton(
            text=HALL_OF_FAME_BTN, callback_data='hall_of_fame'
        )]]
    )
    button_txt = ReplyKeyboardMarkup([[BEGIN_BTN]], resize_keyboard=True)
    if update.message.text == NEXT_TIME_BTN:
        update.message.reply_text(
            text='–ö–∞–∫ –∑–Ω–∞–µ—à—å. –£–≥–æ–≤–∞-—Ä–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É üòº',
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        )
        return None
    global game_stat, PLAYER, bot_wins, user_wins, user_dice_counter
    global user_dice_result, triple_bet_bot, triple_bet_user
    (bot_wins, user_wins, user_dice_counter, user_dice_result, triple_bet_bot,
     triple_bet_user) = [0] * 6
    PLAYER = update.message.chat.id
    init_stat = dict(wins=0, dry_wins=0, triple_bet=0, double_six=0,
                     double_one=0, made_bet=0, guessed_bet=0)
    game_stat = {'BOT': init_stat, PLAYER: init_stat.copy()}
    for text in txt.RULES_DICE:
        update.message.reply_text(
            text,
            reply_markup=(
                button_txt if text == txt.RULES_DICE[-1]
                else ReplyKeyboardRemove()
            )
        )
        time.sleep(1)
    update.message.reply_text(
        text='C–ø–µ—Ä–≤–∞ –º–æ–∂–µ—à—å –∑–∞-–≥–ª—è–Ω—É—Ç—å –≤ –ó–∞–ª –°–ª–∞–≤—ã üëá',
        reply_markup=button_inl
    )
    return BOT_DICE


def bot_bet_roll_dice(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ {BEGIN_BTN}, {YOUR_TURN_BTN}, {REVENGE_BTN} –∏
    {WIN_BACK_BTN}."""
    cancel = ReplyKeyboardMarkup([[NO_MORE_GAME_BTN]], resize_keyboard=True)
    choice = ReplyKeyboardMarkup(
        [[REVENGE_BTN], [CATS_TRAIN_BTN]], resize_keyboard=True
    )
    global bot_wins, user_wins, triple_bet_bot, triple_bet_user
    if update.message.text == REVENGE_BTN:
        update.message.reply_text(
            '–ù–µ –ª—é–±–∏—à—å –ø—Ä–æ–∏–≥—Ä—ã-–≤–∞—Ç—å? –ù—É-–Ω—É!\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üòé'
        )
        time.sleep(1)
    if update.message.text == WIN_BACK_BTN:
        update.message.reply_text(
            '–ù—É –≤—Å—ë - —à—É—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!\n–ë–æ–ª—å—à–µ –ø–æ–¥-–¥–∞–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É üò†'
        )
        time.sleep(1)
    bet_1, bet_2 = random.randint(3, 11), random.randint(3, 11)
    while bet_2 == bet_1:
        bet_2 = random.randint(3, 11)
    update.message.reply_text(
        f'–Ø –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞ {bet_1} –∏ {bet_2} ‚úçÔ∏è',
        reply_markup=ReplyKeyboardRemove()
    )
    time.sleep(1)
    game_stat['BOT']['made_bet'] += 1
    triple_bet_bot += 1
    update.message.reply_text('–ë—Ä–æ—Å–∞—é –∫–æ-—Å—Ç–∏... ‚úä')
    result = 0
    for _ in (1, 2):
        value = update.message.reply_dice()['dice']['value']
        result += value
        time.sleep(3)
    update.message.reply_text(
        f'–ú–æ–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç:  {result} ‚ùóÔ∏è', reply_markup=cancel
    )
    time.sleep(1)
    if result not in (bet_1, bet_2):
        triple_bet_bot = 0
    if result in (bet_1, bet_2, 2, 12):
        if result == 2:
            update.message.reply_text('–û, –Ω–µ—Ç! üò± –î–≤–µ –µ–¥–∏-–Ω–∏—á–∫–∏. –ú–∏–Ω—É—Å –±–∞–ª–ª üò≠')
            game_stat['BOT']['double_one'] += 1
            if bot_wins > 0:
                bot_wins -= 1
        elif result == 12:
            update.message.reply_text(
                '–Ø —Å–æ-—Ä–≤–∞–ª –î–∂–µ–∫ –ø–æ—Ç ü•≥\n–î–≤–µ —à–µ—Å—Ç—ë—Ä–∫–∏! –ü–æ–ª—É—á–∞—é –±–∞–ª–ª üëè'
            )
            game_stat['BOT']['double_six'] += 1
            bot_wins += 1
        else:
            update.message.reply_text(
                '–£—Ä–∞! –ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ üòÑ\n–Ø –≤—ã-–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ ü¶æ'
            )
            game_stat['BOT']['guessed_bet'] += 1
            bot_wins += 1
        if bot_wins == user_wins:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n–£ –Ω–∞—Å –Ω–∏—á—å—è üçª'
            )
        else:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n'
                + ('–Ø –≤–ø–µ—Ä–µ–¥–∏ ü§ò' if bot_wins > user_wins
                   else '–í —Ç–≤–æ—é –ø–æ–ª—å–∑—É üòï')
            )
        if bot_wins == 3:
            time.sleep(1.5)
            update.message.reply_text(
                f'–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç: üí´ {bot_wins} : {user_wins} üí´'
                + ('  –í—Å—É—Ö—É—é! –ö–∞–∫ –∫–æ—Ç—ë–Ω–∫–∞ üôà' if user_wins == 0 else '')
                + '\n\n–ï—Ö—É—É—É ü•≥ –ü–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π!\n–£—á–∏—Å—å —É –º–∞-—Å—Ç–µ—Ä–∞, —Å–∞–ª–∞–≥–∞ üòé',
                reply_markup=choice)
            game_stat['BOT']['wins'] += 1
            if user_wins == 0:
                game_stat['BOT']['dry_wins'] += 1
            if triple_bet_bot == 3:
                game_stat['BOT']['triple_bet'] += 1
            time.sleep(1.5)
            update.message.reply_text(func.dice_game_stat(
                game_stat, PLAYER, update.message.chat.full_name
            ))
            bot_wins, user_wins, triple_bet_bot, triple_bet_user = [0] * 4
            return BOT_DICE
    else:
        update.message.reply_text(
            '–ù–µ —É–≥–∞–¥–∞–ª üòî\n–õ–∞–¥–Ω–æ, –≤ —Å–ª–µ–¥—É—é-—â–∏–π —Ä–∞–∑ –ø–æ-–≤–µ–∑—ë—Ç...'
        )
    time.sleep(1)
    update.message.reply_text(
        text='–¢–≤–æ—è –æ—á–µ-—Ä–µ–¥—å. –î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É ‚òùÔ∏è',
        reply_markup=cancel
    )
    return USER_BET


def user_bets(update, _):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–≤—É—Ö —á–∏—Å–µ–ª –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤."""
    global user_bet_1, user_bet_2, triple_bet_user
    user_bet_1, user_bet_2 = map(int, (update.message.text).split())
    if user_bet_1 == user_bet_2:
        update.message.reply_text(
            '–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑-–Ω—ã–º–∏! –≠—Ç–æ –≤ —Ç–≤–æ–∏—Ö –∂–µ –∏–Ω—Ç–µ-—Ä–µ—Å–∞—Ö ü§¶üèª‚Äç‚ôÇÔ∏è'
        )
        return None
    else:
        update.message.reply_text(
            text='–ü—Ä–∏–Ω—è—Ç–æ! –ë—Ä–æ—Å–∞–π –∫–æ—Å-—Ç–∏ üé≤', reply_markup=DICE_BTN
        )
        game_stat[PLAYER]['made_bet'] += 1
        triple_bet_user += 1
        return USER_DICE


def user_roll_dice(update, _):
    """–ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–º."""
    your_turn = ReplyKeyboardMarkup([[YOUR_TURN_BTN]], resize_keyboard=True)
    choice = ReplyKeyboardMarkup(
        [[WIN_BACK_BTN], [EAT_CORN_BTN]], resize_keyboard=True
    )
    global user_dice_counter, user_dice_result, bot_wins, user_wins
    global triple_bet_user, triple_bet_bot
    points = update.message.dice['value']
    user_dice_counter += 1
    user_dice_result += points
    if user_dice_counter == 1:
        update.message.reply_text(
            text='–ñ–¥—ë–º—Å...',
            reply_markup=ReplyKeyboardRemove()
        )
        time.sleep(2)
        update.message.reply_text(text='–ë—Ä–æ—Å–∞–π –µ—â—ë üëâ', reply_markup=DICE_BTN)
        return None
    update.message.reply_text(
        text='–•–æ—Ç—å –±—ã –º–∏–º–æ ü§û', reply_markup=ReplyKeyboardRemove()
    )
    time.sleep(3)
    update.message.reply_text(
        f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:  {user_dice_result} ‚ùóÔ∏è', reply_markup=your_turn
    )
    if user_dice_result not in (user_bet_1, user_bet_2):
        triple_bet_user = 0
    if user_dice_result in (user_bet_1, user_bet_2, 2, 12):
        if user_dice_result == 2:
            update.message.reply_text(
                '–•–∞! –î–≤–µ –¥—ã—Ä–∫–∏ üôà –ù–µ –ø–æ–≤–µ–∑-–ª–æ. –ú–∏–Ω—É—Å –±–∞–ª–ª.'
            )
            game_stat[PLAYER]['double_one'] += 1
            if user_wins > 0:
                user_wins -= 1
        elif user_dice_result == 12:
            update.message.reply_text(
                '–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –î–≤–µ —à–µ—Å—Ç—ë—Ä–∫–∏ üò≥ –ü–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª.'
            )
            game_stat[PLAYER]['double_six'] += 1
            user_wins += 1
        else:
            update.message.reply_text(
                '–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ-—Ä–æ–Ω–µ.\n–¢—ã —É–≥–∞–¥–∞–ª –≤ —ç—Ç–æ—Ç —Ä–∞–∑ üòè'
            )
            game_stat[PLAYER]['guessed_bet'] += 1
            user_wins += 1
        if user_wins == bot_wins:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n–£ –Ω–∞—Å –Ω–∏—á—å—è üçª'
            )
        else:
            update.message.reply_text(
                f'–°—á—ë—Ç {bot_wins} : {user_wins}\n'
                + ('–Ø –≤–ø–µ—Ä–µ–¥–∏ üôÉ' if bot_wins > user_wins
                   else '–í —Ç–≤–æ—é –ø–æ–ª—å–∑—É üòí')
            )
        if user_wins == 3:
            time.sleep(1.5)
            update.message.reply_text(
                f'–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ-–∑—É–ª—å—Ç–∞—Ç: üí´ {user_wins} : {bot_wins} üí´'
                + ('  –í—Å—É—Ö—É—é. –ß–∏—Ç–µ—Ä! üò†' if bot_wins == 0 else '')
                + '\n\n–¢–≤–æ—è –ø–æ–±–µ–¥–∞!\n–ú–æ–∂–µ—à—å –ø–æ–ª–∞-–∫–æ–º–∏—Ç—å—Å—è –∫—É-–∫—É—Ä—É–∑–∫–æ–π üåΩ\n'
                '–ù–æ –Ω–µ –∑–∞-–∑–Ω–∞–≤–∞–π—Å—è - —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑-–ª–æ üòà\n–ü–æ–Ω–∏–º–∞–µ—à—å, –¥–∞?',
                reply_markup=choice
            )
            game_stat[PLAYER]['wins'] += 1
            if bot_wins == 0:
                game_stat[PLAYER]['dry_wins'] += 1
            if triple_bet_user == 3:
                game_stat[PLAYER]['triple_bet'] += 1
            time.sleep(1.5)
            update.message.reply_text(func.dice_game_stat(
                game_stat, PLAYER, update.message.chat.full_name)
            )
            bot_wins, user_wins, triple_bet_user, triple_bet_bot = [0] * 4
    else:
        update.message.reply_text(
            '–ù–µ —É–≥–∞–¥–∞–ª ü§∑üèª‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ, –±—ã–≤–∞–µ—Ç...\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ-—Å–µ–ª–∏—Ç—å—Å—è üòâ',
            reply_markup=your_turn
        )
    user_dice_counter, user_dice_result = 0, 0
    return BOT_DICE


def cancel_game(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ {NO_MORE_GAME_BTN}, {ENOUGH_BTN}, {EAT_CORN_BTN}
    –∏ {CATS_TRAIN_BTN}."""
    confirmation = ReplyKeyboardMarkup(
        [[ENOUGH_BTN], [NEGATIVE_BTN]], resize_keyboard=True
    )
    main_menu = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    text = update.message.text
    if text == NO_MORE_GAME_BTN:
        update.message.reply_text(
            text='–¢–æ—á–Ω–æ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ-–¥–æ–ª–∂–∞—Ç—å? üßê',
            reply_markup=confirmation
        )
        return None
    update.message.reply_text(
        text='–õ–∞–¥–Ω–æ. –ó–∞-—Ö–æ—á–µ—à—å –µ—â—ë —Å—ã–≥—Ä–∞—Ç—å - —Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ –º–µ–Ω—è –Ω–∞–π-—Ç–∏ üòº',
        reply_markup=main_menu
    )
    return ConversationHandler.END


def show_hall_of_fame(update, _):
    f"""–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {HALL_OF_FAME_BTN}."""
    chat_id = update.effective_chat.id
    query = update.callback_query
    query.answer()
    query.edit_message_text(text='‚úîÔ∏è')
    for text in txt.HALL_OF_FAME:
        bot.send_message(chat_id=chat_id, text=text)
        time.sleep(1)
    rating, last_champion = func.hall_of_fame()
    if rating is None:
        bot.send_message(chat_id=chat_id, text='–ó–∞–ª —Å–ª–∞–≤—ã –ø–æ–∫–∞ –ø—É—Å—Ç ü§∑üèª‚Äç‚ôÇÔ∏è')
        return BOT_DICE
    medals = ['ü•â', 'ü•à', 'ü•á']
    champion = ''
    places = '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n'
    rest = '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n'
    for person in rating:
        if person[5] >= 5 and medals:
            places += f'{medals[-1]}  ' + f'{person[-1]}' + '\n'
            medals.pop()
            if not champion:
                champion = f'–ß–µ–º–ø–∏–æ–Ω:  {person[-1]}  üëë\n'
                champ_name = person[-1]
        else:
            rest += (f'{person[-1]}  üîú  –æ—Å—Ç–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å:  {5 - person[5]}\n'
                     if person[5] < 5 else '  üîù\n')
    if champion:
        if champ_name != last_champion.get('name'):
            today = dt.date.today().strftime('%d.%m.%Y –≥.')
            db = shelve.open(STATISTIC_PATH)
            last_champ = db['DICE_CHAMPION']
            last_champ.update({'name': champ_name, 'date': today})
            db['DICE_CHAMPION'] = last_champ
            db.close()
            champion_from_date = today + '\n'
        else:
            champion_from_date = last_champion['date'] + '\n'
    bot.send_message(chat_id=chat_id,
                     text=champion + ('–ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª ' if champion else '')
                     + (champion_from_date if champion else '')
                     + places + rest)
    for (share_of_wins, average_dice_to_win, share_of_guessed_bet, dry_wins,
         triple_bet, games, wins, looses, made_bet, guessed_bet, double_six,
         share_of_double_six, double_one, share_of_double_one,
         share_of_dry_wins, share_of_triple_bet, name) in rating:
        bot.send_message(
            chat_id=chat_id,
            text=txt.RESULT.format(
                name, games, wins, -share_of_wins, looses, -dry_wins,
                share_of_dry_wins, -triple_bet, share_of_triple_bet,
                average_dice_to_win, made_bet, guessed_bet,
                -share_of_guessed_bet, double_six, share_of_double_six,
                double_one, share_of_double_one
            )
        )
    bot.send_message(
        chat_id=chat_id,
        text='–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤(–∞) —Å–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ-–≥–æ —á–µ–º–ø–∏–æ–Ω–∞? '
             '–ö–∞–∂–µ—Ç—Å—è, –æ–Ω —É–∂–µ –∑–∞-—Å–∏–¥–µ–ª—Å—è... ü§´'
    )
    return BOT_DICE


def place_bet(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–∞."""
    update.message.reply_text(
        '–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ-–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É ü§®\n–í–≤–µ–¥–∏ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ-–±–µ–ª:\n'
        '–º–∏–Ω–∏–º—É–º 3Ô∏è‚É£, –º–∞–∫—Å–∏–º—É–º 1Ô∏è‚É£1Ô∏è‚É£.'
    )


def go_on(update, _):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–º."""
    update.message.reply_text('–¢–µ–±–µ –Ω—É-–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫. –°–æ—Å—Ä–µ-–¥–æ—Ç–æ—á—å—Å—è ü§®')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updater = Updater(token=BOT_TOKEN)
    handler = updater.dispatcher.add_handler
    handler(CommandHandler('start', wake_up))
    handler(CommandHandler('hidden', show_hidden_phrases))
    handler(CommandHandler('visitors', show_visitors))
    birthday_—Åonversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex(SURPRISE_ME_BTN), birthday_init)
        ],
        states={
            BIRTH_1: [
                MessageHandler(
                    Filters.regex(f'{STUPID_BTN}|{NOT_STUPID_BTN}'),
                    cancel_or_birthday_1
                )
            ],
            BIRTH_2: [
                MessageHandler(
                    Filters.regex(f'{DONE_NEXT_BTN}|' + r'^\d{1,2}$'),
                    birthday_2
                )
            ],
            BIRTH_3: [
                MessageHandler(
                    Filters.regex(f'{MATH_BAD_BTN}|' + r'^\d{3,4}$'),
                    birthday_3
                )
            ],
            BIRTH_4: [
                MessageHandler(Filters.regex(r'^\d{3,4}$'), birthday_4)
            ],
            BIRTH_5: [
                MessageHandler(
                    Filters.regex(f'{NOT_MY_BIRTH_BTN}|{EXTRASENS_BTN}'),
                    birthday_finish
                )
            ],
        },
        fallbacks=[MessageHandler(Filters.all, birth_fallback)]
    )
    handler(birthday_—Åonversation)
    falafel_—Åonversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('^–§–∞–ª–∞—Ñ–µ–ª—å$'), secret_dossier)
        ],
        states={
            FALAFEL: [
                MessageHandler(
                    Filters.regex(HAVE_DOSSIERS), show_secret_dossier
                ),
                MessageHandler(
                    Filters.regex(RED_BTN), cancel_secret_dossier
                ),
                MessageHandler(Filters.all, bad_command)
            ],
        },
        fallbacks=[]
    )
    handler(falafel_—Åonversation)
    dice_game_—Åonversation = ConversationHandler(
        entry_points=[
            MessageHandler(
                Filters.regex(f'{NEXT_TIME_BTN}|{LETS_PLAY_BTN}'),
                no_play_or_game_rules
            )
        ],
        states={
            BOT_DICE: [
                MessageHandler(
                    Filters.regex(
                        f'{BEGIN_BTN}|{YOUR_TURN_BTN}|{REVENGE_BTN}|'
                        f'{WIN_BACK_BTN}'
                    ),
                    bot_bet_roll_dice
                ),
                MessageHandler(
                    Filters.regex(f'{CATS_TRAIN_BTN}|{EAT_CORN_BTN}'),
                    cancel_game
                ),
                CallbackQueryHandler(show_hall_of_fame),
                MessageHandler(Filters.all, push_button)
            ],
            USER_BET: [
                MessageHandler(Filters.regex(BET_RANGE), user_bets),
                MessageHandler(
                    Filters.regex(f'{NO_MORE_GAME_BTN}|{ENOUGH_BTN}'),
                    cancel_game
                ),
                MessageHandler(Filters.all, place_bet)
            ],
            USER_DICE: [
                MessageHandler(Filters.dice, user_roll_dice),
                MessageHandler(Filters.all, go_on)
            ],
        },
        fallbacks=[]
    )
    handler(dice_game_—Åonversation)
    zodiac_—Åonversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex(SO_INTERESTING_BTN),
                           zodiac_init_or_end)
        ],
        states={
            HOROSCOPE_1: [
                CallbackQueryHandler(zodiac_result),
                MessageHandler(Filters.all, zodiac_choose_sign)
            ],
            HOROSCOPE_2: [
                MessageHandler(Filters.regex(ADORE_HOROSCOPE_BTN),
                               zodiac_init_or_end),
                MessageHandler(Filters.all, push_button)
            ],
        },
        fallbacks=[]
    )
    handler(zodiac_—Åonversation)
    weather_—Åonversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex(I_NEED_IT_BTN),
                           weather_init)
        ],
        states={
            WEATHER_1: [
                MessageHandler(Filters.all, weather_result)
            ],
            WEATHER_2: [
                MessageHandler(
                    Filters.regex(f'{TOMORROW_BTN}|{WILL_CHECK_BTN}'),
                    weather_tomorrow_or_end)
            ],
        },
        fallbacks=[]
    )
    handler(weather_—Åonversation)
    handler(MessageHandler(Filters.regex(STRANGE_NAME_BTN), strange_name))
    handler(MessageHandler(Filters.regex(CAT_BTN), show_cat_picture))
    handler(MessageHandler(Filters.regex(ANECDOTE_BTN), show_anecdote))
    handler(MessageHandler(
        Filters.regex(f'{SO_SO_BTN}|{BRAVO_BTN}'), bravo_or_so_so)
    )
    handler(MessageHandler(Filters.regex(TALANTS_BTN), talants))
    handler(MessageHandler(Filters.regex(WHAT_ARE_YOU_BTN), what_are_you))
    handler(MessageHandler(Filters.regex(HAVE_MERCY_BTN), have_mercy_answer))
    handler(MessageHandler(Filters.regex(f'{KOMBIKORM_BTN}|{NO_FUNNY_BTN}'),
                           no_funny_or_kombikorm))
    handler(MessageHandler(
        Filters.regex(HIDDEN_PHRASES), answer_hidden_phrases)
    )
    handler(MessageHandler(Filters.all & ~Filters.command, default_answer))
    handler(CallbackQueryHandler(stop_petting, pattern='stop_petting'))
    handler(CallbackQueryHandler(choice_talant, pattern='–î|–ì|–ö|–ü'))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    func.start_logging()
    main()
